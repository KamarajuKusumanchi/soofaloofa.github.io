<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kevin Sookocheff</title>
    <link>http://sookocheff.com/tags/hypermedia/index.xml/</link>
    <language>en-us</language>
    <copyright>Copyright Kevin Sookocheff.</copyright>
    <lastBuildDate>Tue, 01 Apr 2014 14:16:18 UTC</lastBuildDate>
    
    <item>
      <title>How to Version a REST API</title>
      <link>http://sookocheff.com/posts/2014-04-01-how-to-version-a-rest-api/</link>
      <pubDate>Tue, 01 Apr 2014 14:16:18 UTC</pubDate>
      <author>kevin.sookocheff@gmail.com (Kevin Sookocheff)</author>
      <guid>http://sookocheff.com/posts/2014-04-01-how-to-version-a-rest-api/</guid>
      <description>

&lt;p&gt;API versioning is a fact of life. Even the most well designed API changes as new features and relationships are uncovered. Unfortunately, updating an API is seldom as simple as changing the behaviour of our existing URL endpoints on her he server. If we have existing clients we need to explicitly advertise breaking changes in a seamless way. This article explains a few methods of specifying breaking changes that offer a clear upgrade path for existing API clients.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;1) Versioned URL&lt;/h2&gt;

&lt;p&gt;URL versioning inserts a version number directly in the URL of the resource. As an example,  version one of the API could be accessed through the &lt;code&gt;v1&lt;/code&gt; URL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http://sookocheff.com/api/v1/users/12345
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Version two of the API could be accessed through the &lt;code&gt;v2&lt;/code&gt; URL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http://sookocheff.com/api/v2/users/12345
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This solution has been widely adopted because it is easy to deploy and easy for client developers to understand. This method also makes each API version discoverable and browseable without using an advanced HTTP client â€” just alter the URL.&lt;/p&gt;

&lt;p&gt;The drawback to using URL versioning is that by changing the URL of a resource with each new API version we are violating the REST constraint that &lt;a href=&#34;http://sookocheff.com/posts/2014-03-19-how-rest-constraints-affect-api-design/&#34;&gt;each resource be accessible via a unique URL&lt;/a&gt;. To mitigate this you can map the current version of the API to a non-versioned URL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http://sookocheff.com/api/users/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once this mapping is in place you can safely deprecate old URLs by redirecting to the non-versioned URL &amp;ndash; notifying the client to use the latest version. At all times the non-versioned URL represents the latest version of that resource.&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Pros:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easy to implement.&lt;/li&gt;
&lt;li&gt;Easy to understand.&lt;/li&gt;
&lt;li&gt;Direct path to deprecation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Cons:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Violates REST principle of unique URLs for a resource.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;2) Versioned Media Type&lt;/h2&gt;

&lt;p&gt;When making an HTTP request the client can request a specific MIME type (or list of MIME types) that it is willing to accept using an &lt;code&gt;Accept&lt;/code&gt; header. For example, an HTML client may use the following &lt;code&gt;Accept&lt;/code&gt; header to request an HTML representation of the resource.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v1/users/12345 HTTP/1.1
Host: sookocheff.com
Accept: text/html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whereas an XML client may use the following &lt;code&gt;Accept&lt;/code&gt; header to request an XML representation of the resource.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /v1/users/12345 HTTP/1.1
Host: sookocheff.com
Accept: application/xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use this functionality to allow the client to access specific versions of a resource.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET  /users/12345 HTTP/1.1
Host: sookocheff.com
Accept: application/vnd.sookocheff.user+json?version=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method assumes we have defined a custom media type to represent every resource in our API and that the media type accepts a &lt;code&gt;version&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;Versioning the media type does adhere to strict REST principles but causes problems in other ways. First, you need a custom media type for every resource returned by your API. This is not only reinventing the wheel &amp;ndash; &lt;a href=&#34;http://schema.org/&#34;&gt;perfectly good&lt;/a&gt; &lt;a href=&#34;http://www.iana.org/assignments/media-types/media-types.xhtml&#34;&gt;media types&lt;/a&gt; &lt;a href=&#34;http://www.freeformatter.com/mime-types-list.html&#34;&gt;already exist&lt;/a&gt; &amp;ndash; it also creates a media type so specific to your API that it cannot be reused elsewhere. Lastly, it is unclear whether the version parameter applies to the version of the media type or to the version of your API.&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Pros:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Adheres to REST principles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Cons:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Custom media type for every resource.&lt;/li&gt;
&lt;li&gt;Binds your media type to your API.&lt;/li&gt;
&lt;li&gt;Unclear versioning.&lt;/li&gt;
&lt;li&gt;Requires sophisticated API client.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;3) Versioned HTTP Header&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7.1&#34;&gt;HTTP specification&lt;/a&gt; states that unknown HTTP headers MUST be forwarded on to the recipient. This means that custom HTTP headers can be set by our client and received by our API.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET /users/12345 HTTP/1.1
Host: sookocheff.com
Accept: application/json
Users-Version: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A server receiving this request can parse the header to ascertain the version number being requested by the client and return the proper representation.&lt;/p&gt;

&lt;p&gt;This method requires that your API client is able to modify the HTTP headers of its requests. If the client is unable to provide a version number with the HTTP header you can assume that a request is made for the latest API version.&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Pros:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Adheres to REST principles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Cons:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Requires sophisticated API client.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;4) Versioned Resources&lt;/h2&gt;

&lt;p&gt;The last versioning method is to set the version number in the response itself. This places the burden of versioning with the client rather than the server. A client receiving a response from a known version number can parse it and act appropriately. It would be up to the client how to handle an unknown version number.&lt;/p&gt;

&lt;p&gt;This method is only appropriate if you as the developer have direct control over both the server and the client being deployed.&lt;/p&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;Pros:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Simplified server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;Cons:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Complex client.&lt;/li&gt;
&lt;li&gt;Tightly couples server to client.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;What to do?&lt;/h2&gt;

&lt;p&gt;By following &lt;a href=&#34;http://sookocheff.com/posts/2014-03-19-how-rest-constraints-affect-api-design/&#34;&gt;REST principles&lt;/a&gt; we can guide our API versioning practices while being pragmatic about our choices so that our API can work in the real world.&lt;/p&gt;

&lt;p&gt;My recommendation is to combine versioned URLs with custom HTTP headers using the following guidelines. With these guidelines we can safely version our API while supporting existing clients and offering them a clear upgrade path.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each major version of the API recieves a versioned URL.&lt;/li&gt;
&lt;li&gt;One non-versioned URL always represents the latest API version.&lt;/li&gt;
&lt;li&gt;Redirect deprecated URLs to the canonical URL after an advertised grace period.&lt;/li&gt;
&lt;li&gt;Add a custom HTTP header for the version number.

&lt;ul&gt;
&lt;li&gt;This header specifies both major &lt;strong&gt;and&lt;/strong&gt; minor version numbers.&lt;/li&gt;
&lt;li&gt;The non-versioned URL returns the appropriate version of the resource when specified by the HTTP header.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;toc_13&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api&#34;&gt;Vinay Sahni&lt;/a&gt; has collected a long list of best practices for pragmatic API design, including versioning.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/389169/best-practices-for-api-versioning&#34;&gt;stackoverflow&lt;/a&gt; presents a collection of good answers providing best practices for API versioning.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When to Use HTTP PUT and HTTP POST</title>
      <link>http://sookocheff.com/posts/2014-03-27-when-to-use-http-put-and-http-post/</link>
      <pubDate>Thu, 27 Mar 2014 07:23:34 UTC</pubDate>
      <author>kevin.sookocheff@gmail.com (Kevin Sookocheff)</author>
      <guid>http://sookocheff.com/posts/2014-03-27-when-to-use-http-put-and-http-post/</guid>
      <description>

&lt;p&gt;The HTTP protocol defines two methods for updating a resource &amp;ndash; &lt;code&gt;PUT&lt;/code&gt; and
&lt;code&gt;POST&lt;/code&gt;. Both &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; are used to modify a resource and this semantic
similarity can confuse API developers. This confusion has led most developers to
use &lt;code&gt;POST&lt;/code&gt; for any action which may modify the state of a resource, ignoring
&lt;code&gt;PUT&lt;/code&gt; entirely.&lt;/p&gt;

&lt;p&gt;This article attempts to explain the semantics behind the &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;
methods and offers clear suggestions on when to use each method.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;PUT&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s go &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616.html&#34;&gt;straight to the HTTP/1.1 RFC&lt;/a&gt; for the &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6&#34;&gt;definition of PUT&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The PUT method requests that the enclosed entity be stored under the supplied
Request-URI. If the Request-URI refers to an already existing resource, the
enclosed entity SHOULD be considered as a modified version of the one residing
on the origin server. If the Request-URI does not point to an existing
resource &amp;hellip; the origin server can create the resource with that URI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The PUT specification requires that you already know the URL of the resource you
wish to create or update. On create, if the client chooses the identifier for a
resource a PUT request will create the new resource at the specified URL.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT /user/1234567890 HTTP/1.1
Host: http://sookocheff.com

{
	&amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
	&amp;quot;website&amp;quot;: &amp;quot;http://kevinsookocheff.com&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server could respond with a &lt;code&gt;201 Created&lt;/code&gt; status code and the new resource&amp;rsquo;s
location.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 201 Created
Location: /user/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, if you know that a resource already exists for a URL, you can make
a PUT request to that URL to replace the state of that resource on the server.
This example updates the user&amp;rsquo;s website.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PUT /user/1234567890 HTTP/1.1
Host: http://sookocheff.com

{
	&amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
	&amp;quot;website&amp;quot;: &amp;quot;http://sookocheff.com&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general the HTTP PUT method replaces the resource at the current URL with the
resource contained within the request. PUT is used to both create and update the
state of a resource on the server.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;POST&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s go &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616.html&#34;&gt;back to the HTTP/1.1 RFC&lt;/a&gt; for the &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5&#34;&gt;definition of POST&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The POST method is used to request that the origin server accept the entity
enclosed in the request as a new subordinate of the resource identified by the
Request-URI &amp;hellip;  The posted entity is subordinate to that URI in the same way
that a file is subordinate to a directory containing it, a news article is
subordinate to a newsgroup to which it is posted, or a record is subordinate
to a database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Practically speaking, POST is used to append a resource to an existing
collection. In the following example you do not know the actual URL of the
resource &amp;ndash; the server decides the location where it is stored under the
&lt;code&gt;user&lt;/code&gt; collection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /user HTTP/1.1
Host: http://sookocheff.com

{
    &amp;quot;name&amp;quot;: &amp;quot;Bryan Larson&amp;quot;,
    &amp;quot;website&amp;quot;: &amp;quot;http://www.bryanlarson.ca&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server could respond with a &lt;code&gt;201 Created&lt;/code&gt; status code and the resource&amp;rsquo;s new
location.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 201 Created
Location: /user/636363
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Subsequent updates to this user would be made through a &lt;code&gt;PUT&lt;/code&gt; request to the
specific URL for the user - &lt;code&gt;/user/636363&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The book &lt;a href=&#34;http://www.amazon.ca/RESTful-Web-APIs-Leonard-Richardson/dp/1449358063&#34;&gt;RESTful Web APIs&lt;/a&gt;
classify this behaviour &lt;em&gt;POST-to-append&lt;/em&gt; and is the generally recommended way to
handle a POST request within the context of a specific resource.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Putting it Together&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616.html&#34;&gt;HTTP/1.1 RFC&lt;/a&gt; offers some guidance on &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6&#34;&gt;distinguishing between POST and
PUT&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The fundamental difference between the POST and PUT requests is reflected in
the different meaning of the Request-URI. The URI in a POST request identifies
the resource that will handle the enclosed entity &amp;hellip;  In contrast, the URI in
a PUT request identifies the entity enclosed with the request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By following the existing semantics of the HTTP PUT and POST methods we can
begin to take advantage of the &lt;a href=&#34;http://sookocheff.com/posts/2014-03-19-how-rest-constraints-affect-api-design/&#34;&gt;benefits of REST&lt;/a&gt; to write scalable and
robust APIs. Not only is your API ready to scale and easy to maintain, it is
easy to understand and use. By consistently following these existing semantics
you can avoid inserting special cases and &amp;lsquo;gotchas&amp;rsquo; into your API that confuse
client developers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How REST Constraints Affect API Design</title>
      <link>http://sookocheff.com/posts/2014-03-19-how-rest-constraints-affect-api-design/</link>
      <pubDate>Wed, 19 Mar 2014 14:11:48 UTC</pubDate>
      <author>kevin.sookocheff@gmail.com (Kevin Sookocheff)</author>
      <guid>http://sookocheff.com/posts/2014-03-19-how-rest-constraints-affect-api-design/</guid>
      <description>

&lt;p&gt;REST was developed and formalized by analyzing the existing Web and extracting
the principles that made it work. This set of principles was written down in the
&lt;a href=&#34;https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&#34;&gt;Fielding dissertation&lt;/a&gt;
which lays out the set of constraints that, when enforced, will make a generic
network system into a resilient network like the Web. In Chapter 5 of the
dissertation Fielding outlines REST&amp;rsquo;s interface constraints.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;REST is defined by four interface constraints: identification of resources;
manipulation of resources using representations; self-descriptive messages;
and, hypermedia as the engine of application state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Why is this important for APIs?&lt;/h3&gt;

&lt;p&gt;API design is in an infancy. Each API is designed for a single use case and
standard. This proliferation of different design ideas results in APIs that each
have their own specification and semantics. Interoperability between APIs is
nonexistent. In the early 1990s the Web was facing this exact problem and as a
result the principles of REST were formalized and adopted. The result was a
scalable, resilient and ultimately successful system. By adopting the REST
constraints in our APIs we can take advantage of this foundational work to
provide APIs that form a scalable and resilient network of their own.&lt;/p&gt;

&lt;p&gt;We will take a look at each of the four interface constraints in turn and see
how they can be used to design an API that developers love to use.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;1. Identification of Resources&lt;/h2&gt;

&lt;p&gt;A resource is the key abstraction of REST. Anything that can be named is a
resource &amp;ndash; a video, a document, an image. We identify resources using a
unique identifier called the Uniform Resource Identifier (URI). When discussing
the Web we almost always use a more specific form of URI called a Uniform
Resource Locator (URL). A URL is what we are all accustomed to when accessing
sites through HTTP.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://sookocheff.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By building REST APIs over HTTP we can use URLs to identify resources accessed
by our API. To satisfy the REST constraint each URL should map to a single
resource and all access to this resource is done through that URL. As an
example, if I want to offer an API for a shipping application I might have a
resource representing an order. A URL for the individual order numbered &lt;code&gt;12345&lt;/code&gt;
would have a path including the order number.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/orders/12345
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This simple example shows how we can create a URL to uniquely represent each
resource represented by our API.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;2. Manipulation of Resources Using Representations&lt;/h2&gt;

&lt;p&gt;When making a request for a resource the server responds with a representation
of the resource. This representation captures the current state of the resource
in a format that the client can understand and manipulate. Abstractly the
representation is a sequence of bytes along with metadata describing those
bytes. This metadata is known as the media type of the representation. Typical
API examples are HTML, JSON, and XML. Because the server sends a representation
of the resource it is possible for the client to request a specific
representation that fits the client&amp;rsquo;s needs. For example, a client can ask for
the JSON representation of a resource or the XML representation of the resource.
The server may provide this representation if it is capable of doing so. This
concept is called &lt;em&gt;content negotiation&lt;/em&gt;. You can use content negotiation in your
API to allow multiple clients to access a different representations of the
resource from the same URL.&lt;/p&gt;

&lt;p&gt;The way that a client asks for a specific representation is through the HTTP
&lt;code&gt;Accepts&lt;/code&gt; header. The following request is asking for a plain text
representation of the order.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /orders/12345
Accept: text/plain
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whereas the following request is asking for a JSON representation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /orders/12345
Accept: application/json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By using content negotiation in your API you can offer new resource
representations without changing the resources URL or breaking existing clients.
This keeps your client and server flexibly decoupled.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;3. Self-Descriptive Messages&lt;/h2&gt;

&lt;p&gt;The representations served by a RESTful system contain all of the data required
by the client to understand and act on the resource. If any additional
information is needed but not contained in the response a link to that
information should be provided within the response. This means that the media
type you choose to respond with should be self documenting and should list any
related resources or actions that the client may be interested in. Specific
media types already exist for JSON APIS. These include HAL, JSON-LD,
Collection+JSON and JSONAPI. For a detailed discussion see my post &lt;a href=&#34;http://sookocheff.com/posts/2014-03-11-on-choosing-a-hypermedia-format/&#34;&gt;on
choosing a hypermedia
type&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each of these formats are aiming to solve the &lt;a href=&#34;https://www.w3.org/TR/json-ld/#basic-concepts&#34;&gt;same
problem&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JSON has no built-in support for hyperlinks, which are a fundamental building
block on the Web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By linking together the resources offered by your API you can build
self-descriptive APIs.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;4. Hypermedia As The Engine Of Application State&lt;/h2&gt;

&lt;p&gt;Together, the first three REST constraints imply the fourth and most important &amp;ndash;
hypermedia as the engine of application state. By uniquely identifying
resources, using representations to communicate resource state and using
self-descriptive messages via media types all application state stays with the
client.&lt;/p&gt;

&lt;p&gt;By keeping all application state with the client a direct connection between the
client and the server is not necessary, allowing the server to scale to serve
many clients with minimal resources. This ability to scale has led to the Web&amp;rsquo;s
scalable and resilient nature.&lt;/p&gt;

&lt;p&gt;By designing our APIs with the REST constraints we can build scalable and
resilient APIs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On choosing a hypermedia type for your API - HAL, JSON-LD, Collection&#43;JSON, SIREN, Oh My!</title>
      <link>http://sookocheff.com/posts/2014-03-11-on-choosing-a-hypermedia-format/</link>
      <pubDate>Tue, 11 Mar 2014 15:15:15 UTC</pubDate>
      <author>kevin.sookocheff@gmail.com (Kevin Sookocheff)</author>
      <guid>http://sookocheff.com/posts/2014-03-11-on-choosing-a-hypermedia-format/</guid>
      <description>

&lt;p&gt;In recent years REST has been at the forefront of modern API
design. This has led to APIs with manageable URLs that respect the HTTP verbs
(GET, POST, PUT &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616.html&#34;&gt;and the
 rest&lt;/a&gt;), producing an
intuitive model for client developers. Unfortunately, there are two problems
that REST doesn&amp;rsquo;t solve alone.&lt;/p&gt;

&lt;p&gt;The first problem is standardized responses. Most every enterprise has defined
their own custom API format, usually a JSON response that maps neatly to their
own data model. A Facebook API client cannot communicate with a Twitter API and
vice versa. This leads to a proliferation of API clients that do almost &amp;ndash; but
not quite &amp;ndash; the same thing. Duplication of effort abounds.&lt;/p&gt;

&lt;p&gt;The second problem is linking. As the &lt;a href=&#34;https://www.w3.org/TR/json-ld/#basic-concepts&#34;&gt;W3C puts it&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JSON has no built-in support for hyperlinks, which are a fundamental building
block on the Web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The drawback of this is that two API endpoints are only linked together by API
documentation. As a user you are forced to scour through walls of API
documentation to understand the relationships between API endpoints and grasp
exactly what actions you can and cannot take against a given resource.&lt;/p&gt;

&lt;p&gt;To solve these problems we can look at how we structure our API responses. By
using &lt;em&gt;hypermedia&lt;/em&gt; in our responses we can offer links between API endpoints and
documentation, potential actions, and related endpoints. This allows for
&lt;em&gt;discoverable&lt;/em&gt; APIs where it is clear from the API response the set of next
actions that a client may want to take. Furthermore, by &lt;em&gt;standardizing&lt;/em&gt; on a
hypermedia type clients developed for one API can understand the format of
another API and communicate with minimal duplicated effort.&lt;/p&gt;

&lt;p&gt;In this post I will evaluate a few mature hypermedia types for APIs,
offering a side-by-side comparison of their strengths and weaknesses. If you
are impatient for the final result you can &lt;a href=&#34;https://gist.github.com/soofaloofa/9350847&#34;&gt;jump straight to the code&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;The Model&lt;/h2&gt;

&lt;p&gt;To drive this discussion let&amp;rsquo;s use a hypothetical API for managing a &lt;code&gt;Player&lt;/code&gt;
resource derived from the &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/GameKit/Reference/GKPlayer_Ref/Reference/Reference.html#//apple_ref/occ/cl/GKPlayer&#34;&gt;&lt;code&gt;GKPlayer&lt;/code&gt;
class&lt;/a&gt;
used by Apple&amp;rsquo;s GameCenter API. The &lt;code&gt;Player&lt;/code&gt; resource can be expressed with this
simple diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2014-02-06-on-choosing-a-hypermedia-format/player-model.png&#34; alt=&#34;PlayerResource&#34; title=&#34;Player Resource&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Representing this as a typical JSON response would yield something like the
following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;alias&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;displayName&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;profilePhotoUrl&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the list of this player&amp;rsquo;s friends could be retrieved with a separate API call.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
{
    &amp;quot;playerId&amp;quot;: &amp;quot;1895638109&amp;quot;,
    &amp;quot;alias&amp;quot;: &amp;quot;sdong&amp;quot;,
    &amp;quot;displayName&amp;quot;: &amp;quot;Sheldon Dong&amp;quot;,
    &amp;quot;profilePhotoUrl&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/avatar.png&amp;quot;
},
{
    &amp;quot;playerId&amp;quot;: &amp;quot;8371023509&amp;quot;,
    &amp;quot;alias&amp;quot;: &amp;quot;mliu&amp;quot;,
    &amp;quot;displayName&amp;quot;: &amp;quot;Martin Liu&amp;quot;,
    &amp;quot;profilePhotoUrl&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/avatar.png&amp;quot;
}
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at how this API can be represented using hypermedia types.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;JSON-LD&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll start by looking at JSON for Linked Documents (JSON-LD). JSON-LD is a well
supported media type endorsed by the &lt;a href=&#34;https://www.w3.org&#34;&gt;World Wide Web
Consortium&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The selling point of JSON-LD is that you can adopt the standard without
introducing breaking changes to your API. The syntax is designed to not disturb
already deployed systems and to provide a smooth migration path from JSON to
JSON with added semantics.&lt;/p&gt;

&lt;p&gt;JSON-LD introduces keywords that augment an existing response with additional
information. The most important augmentation is the &lt;em&gt;context&lt;/em&gt;. A context in
JSON-LD defines a set of terms that are scoped and valid within the
representation being discussed. A context is assigned to a JSON response using
the &lt;code&gt;@context&lt;/code&gt; keyword.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;@context&amp;quot;: {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within the context properties are assigned to a URL that provides documentation
about the meaning of that property.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;@context&amp;quot;: {
        &amp;quot;displayName&amp;quot;: &amp;quot;https://schema.org/name&amp;quot;
    },
    &amp;quot;displayName&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a good idea to use standard naming for our APIs so we can go ahead and
rename &lt;code&gt;displayName&lt;/code&gt; to &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;@context&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;https://schema.org/name&amp;quot;
    },
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point we have an unambiguous definition of what the property &lt;code&gt;name&lt;/code&gt;
means within the API response by visiting &lt;code&gt;https://schema.org/name&lt;/code&gt; to read the
semantics of this property. We can go further and add context to the rest of the
properties. To be consistent with existent naming we will change
&lt;code&gt;profilePhotoUrl&lt;/code&gt; to &lt;code&gt;image&lt;/code&gt; and &lt;code&gt;alias&lt;/code&gt; to &lt;code&gt;alternateName&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;@context&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;https://schema.org/name&amp;quot;,
        &amp;quot;alternateName&amp;quot;: &amp;quot;https://schema.org/alternateName&amp;quot;,
        &amp;quot;image&amp;quot;: {
            &amp;quot;@id&amp;quot;: &amp;quot;https://schema.org/image&amp;quot;,
            &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot;
        }
    },
    &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot;,
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example we&amp;rsquo;ve added the &lt;code&gt;@id&lt;/code&gt; annotation. &lt;code&gt;@id&lt;/code&gt; signifies &lt;em&gt;identifiers&lt;/em&gt;.
Identifiers allow unique external references to any resource, providing similar
semantcis to URLs. In JSON-LD terminology every distinct resource is a node in
the JSON-LD graph. These distinct nodes should have identifiers that can be used
to retrieve a representation of that node.&lt;/p&gt;

&lt;p&gt;The last element from our model that is missing from our JSON-LD response is the
list of friends. With JSON-LD unordered lists can be specified using simple
array notation.  In this example we will represent friends by the identifiers
that point to their resources. An HTTP GET request to those URLs would return
the full representation of each friend.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;@context&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;https://schema.org/name&amp;quot;,
        &amp;quot;alternateName&amp;quot;: &amp;quot;https://schema.org/alternateName&amp;quot;,
        &amp;quot;image&amp;quot;: {
            &amp;quot;@id&amp;quot;: &amp;quot;https://schema.org/image&amp;quot;,
            &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot;
        },
        &amp;quot;friends&amp;quot;: {
            &amp;quot;@container&amp;quot;: &amp;quot;@set&amp;quot;
         }
    },
    &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot;,
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;,
    &amp;quot;friends&amp;quot;: [ 
        {
            &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/1895638109&amp;quot;
        },
        {
            &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/8371023509&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us the representation of our &lt;code&gt;Player&lt;/code&gt; resource in JSON-LD. This
example doesn&amp;rsquo;t cover all of JSON-LD but should give you a flavour of how the
format can be used.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/markuslanthaler&#34;&gt;Markus Lanthaler&lt;/a&gt; for offering
suggestions on how to simplify this even more. In this example we define a
&lt;code&gt;@vocab&lt;/code&gt; for our context that encompasses the terms that we use within our
response. Our list of friends is provided as a simple link to a separate
endpoint.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;@context&amp;quot;: {
        &amp;quot;@vocab&amp;quot;: &amp;quot;https://schema.org/&amp;quot;,
        &amp;quot;image&amp;quot;: { &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot; },
        &amp;quot;friends&amp;quot;: { &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot; }
    },
    &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot;,
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;,
    &amp;quot;friends&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to dive fully into JSON-LD you can always read
the &lt;a href=&#34;https://www.w3.org/TR/json-ld/&#34;&gt;specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;JSON-LD lacks support for specifying the actions you can take on a resource. To
address this short-coming &lt;a href=&#34;http://www.markus-lanthaler.com/hydra/&#34;&gt;HYDRA&lt;/a&gt;
provides a vocabulary allowing client-server communication using the JSON-LD
message format.&lt;/p&gt;

&lt;p&gt;To specify the actions available on a resource we would use the &lt;code&gt;operation&lt;/code&gt;
property.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;@context&amp;quot;: [
        &amp;quot;http://www.w3.org/ns/hydra/core&amp;quot;,
        {
            &amp;quot;@vocab&amp;quot;: &amp;quot;https://schema.org/&amp;quot;,
            &amp;quot;image&amp;quot;: { &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot; },
            &amp;quot;friends&amp;quot;: { &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot; }
        }
    ],
    &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;,
    &amp;quot;operation&amp;quot;: {
        &amp;quot;@type&amp;quot;: &amp;quot;BefriendAction&amp;quot;,
        &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;,
        &amp;quot;expects&amp;quot;: {
            &amp;quot;@id&amp;quot;: &amp;quot;http://schema.org/Person&amp;quot;,
            &amp;quot;supportedProperty&amp;quot;: [
                { &amp;quot;property&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;range&amp;quot;: &amp;quot;Text&amp;quot; },
                { &amp;quot;property&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;range&amp;quot;: &amp;quot;Text&amp;quot; },
                { &amp;quot;property&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;range&amp;quot;: &amp;quot;URL&amp;quot; }
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;operation&lt;/code&gt; property defines a &lt;code&gt;method&lt;/code&gt; term that specifies the HTTP method
that the endpoint allows. HYDRA also provides a template of the expected
properties and their data types. In our example a POST request to
&lt;code&gt;https://api.example.com/player/1234567890/friends&lt;/code&gt; (the resource&amp;rsquo;s URL) will
add a new friend to our user&amp;rsquo;s friend list.&lt;/p&gt;

&lt;p&gt;HYDRA also provides a &lt;code&gt;member&lt;/code&gt; property that allows us to embed additional
resources within our current representations. In the following example we embed
our friends directly within the resource as a list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET https://api.example.com/player/1234567890/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;@context&amp;quot;: [
        &amp;quot;http://www.w3.org/ns/hydra/core&amp;quot;,
        {
            &amp;quot;@vocab&amp;quot;: &amp;quot;https://schema.org/&amp;quot;,
            &amp;quot;image&amp;quot;: { &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot; },
            &amp;quot;friends&amp;quot;: { &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot; }
        }
    ],
    &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;,
    &amp;quot;operation&amp;quot;: {
        &amp;quot;@type&amp;quot;: &amp;quot;BefriendAction&amp;quot;,
        &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;,
        &amp;quot;expects&amp;quot;: {
            &amp;quot;@id&amp;quot;: &amp;quot;http://schema.org/Person&amp;quot;,
            &amp;quot;supportedProperty&amp;quot;: [
                { &amp;quot;property&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;range&amp;quot;: &amp;quot;Text&amp;quot; },
                { &amp;quot;property&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;range&amp;quot;: &amp;quot;Text&amp;quot; },
                { &amp;quot;property&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;range&amp;quot;: &amp;quot;URL&amp;quot; }
            ]
        }
    },
    &amp;quot;member&amp;quot;: [
            {
                &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/1895638109&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Sheldon Dong&amp;quot;,
                &amp;quot;alternateName&amp;quot;: &amp;quot;sdong&amp;quot;,
                &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/avatar.png&amp;quot;,
                &amp;quot;friends&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/friends&amp;quot;
            },
            {
                &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/8371023509&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Martin Liu&amp;quot;,
                &amp;quot;alternateName&amp;quot;: &amp;quot;mliu&amp;quot;,
                &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/avatar.png&amp;quot;,
                &amp;quot;friends&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/friends&amp;quot;
            }
        ],
    &amp;quot;nextPage&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends?page=2&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ve also added a &lt;code&gt;nextPage&lt;/code&gt; property which is a property defined by HYDRA for
paged collections. For more details on HYDRA&amp;rsquo;s reserved properties you can read
the full
&lt;a href=&#34;http://www.markus-lanthaler.com/hydra/spec/latest/core/#properties&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;HAL&lt;/h2&gt;

&lt;p&gt;HAL is a lightweight media type that uses the idea of &lt;em&gt;Resources&lt;/em&gt; and &lt;em&gt;Links&lt;/em&gt; to
model your JSON responses. &lt;em&gt;Resources&lt;/em&gt; can contain &lt;em&gt;State&lt;/em&gt; defined by key-value
pairs of data, &lt;em&gt;Links&lt;/em&gt; leading to additional resources and &lt;em&gt;Embedded Resources&lt;/em&gt;
which are children of the current resource embedded in the representation for
convenience.&lt;/p&gt;

&lt;p&gt;HAL is simple to use and easy to understand. These virtues have lead HAL to
become one of the leading hypermedia types in modern APIs.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;State&lt;/h3&gt;

&lt;p&gt;State is the traditional JSON key-value pairs defining the current state of the
resource.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Links&lt;/h3&gt;

&lt;p&gt;Links in HAL are identified as a JSON object named &lt;code&gt;_links&lt;/code&gt;. Keys within
&lt;code&gt;_links&lt;/code&gt; are the name of the link and should describe the relationship between
the current resource and the link. At a minimum the &lt;code&gt;_links&lt;/code&gt; property should
contain a &lt;code&gt;self&lt;/code&gt; entry pointing to the current resource.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;_links&amp;quot;: {
        &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot; }
    },
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can easily add a link to the &lt;code&gt;Friends&lt;/code&gt; resource which can be used to retrieve
the full list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{

    &amp;quot;_links&amp;quot;: {
        &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot; },
        &amp;quot;friends&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot; }
    },
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Embedded Resources&lt;/h3&gt;

&lt;p&gt;Making a GET request to the &lt;code&gt;Friends&lt;/code&gt; link would return a full list of
&lt;code&gt;Player&lt;/code&gt; resources. Each &lt;code&gt;Player&lt;/code&gt; returned is embedded in the representation
as an &lt;em&gt;Embedded Resource&lt;/em&gt;. &lt;em&gt;Embedded Resources&lt;/em&gt; augment the current resource
state with additional, related resources. These resources are provided as a
convenience to the client application and can be easily used to represent a
list of items.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;_links&amp;quot;: {
        &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot; },
        &amp;quot;next&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends?page=2&amp;quot; }
    },
    &amp;quot;size&amp;quot;: &amp;quot;2&amp;quot;,
    &amp;quot;_embedded&amp;quot;: { 
        &amp;quot;player&amp;quot;: [
            { 
                &amp;quot;_links&amp;quot;: { 
                    &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109&amp;quot; },
                    &amp;quot;friends&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/friends&amp;quot; }
                },
                &amp;quot;playerId&amp;quot;: &amp;quot;1895638109&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Sheldon Dong&amp;quot;,
                &amp;quot;alternateName&amp;quot;: &amp;quot;sdong&amp;quot;,
                &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/avatar.png&amp;quot;
            },
            { 
                &amp;quot;_links&amp;quot;: { 
                    &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509&amp;quot; },
                    &amp;quot;friends&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/friends&amp;quot; }
                },
                &amp;quot;playerId&amp;quot;: &amp;quot;8371023509&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Martin Liu&amp;quot;,
                &amp;quot;alternateName&amp;quot;: &amp;quot;mliu&amp;quot;,
                &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/avatar.png&amp;quot;
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this response we&amp;rsquo;ve added a &lt;code&gt;next&lt;/code&gt; link to represent a paged collection and
provide a reference to get the next set of friends in the list. The embedded
resources are a list contained within the &lt;code&gt;player&lt;/code&gt; property.&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;Curies&lt;/h3&gt;

&lt;p&gt;An important point about HAL is that each link relation points to a URL with
documentation about that relation. This makes the API discoverable by always
providing documentation about the links available from the current resource. In
the next example a URL for &lt;code&gt;friends&lt;/code&gt; points to documentation about that resource.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;_links&amp;quot;: {
        &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot; },
        &amp;quot;https://api.example.com/docs/rels/friends&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot; }
    },
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since URLs are long and unwieldy, HAL provides &lt;code&gt;curies&lt;/code&gt;. &lt;code&gt;Curies&lt;/code&gt; are a reserved
link relation acting as a base URL that is expanded upon by each term. In this
example we will define a &lt;code&gt;curie&lt;/code&gt; &lt;code&gt;ex&lt;/code&gt; that references the &lt;code&gt;URI&lt;/code&gt;
&lt;code&gt;https://api.example.com/docs/rels/{rel}&lt;/code&gt;. &lt;code&gt;Curies&lt;/code&gt; are expanded by postfixing
the curie name with a &lt;code&gt;:&lt;/code&gt; followed by the name of the resource.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;_links&amp;quot;: {
        &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot; },
        &amp;quot;curies&amp;quot;: [{ &amp;quot;name&amp;quot;: &amp;quot;ex&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/docs/rels/{rel}&amp;quot;, &amp;quot;templated&amp;quot;: true }],
        &amp;quot;ex:friends&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot; }
    },
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HAL&amp;rsquo;s lightweight syntax and model make it a popular choice for API developers
and users. For more information on HAL you can refer to the draft standard that
has been submitted to the &lt;a href=&#34;https://tools.ietf.org/html/draft-kelly-json-hal-06&#34;&gt;Network Working
Group&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Collection+JSON&lt;/h2&gt;

&lt;p&gt;The Collection+JSON standard is a media type that standardizes the reading,
writing and querying of items in a collection. Although geared to handling
collections, by representing a single item as a collection of one element,
Collection+JSON can elegantly handle most API responses.&lt;/p&gt;

&lt;p&gt;At a minimum a Collection+JSON response must contain a &lt;code&gt;collection&lt;/code&gt; object with
a &lt;code&gt;version&lt;/code&gt; and a URI pointing to itself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;collection&amp;quot;: {
        &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
        &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Returning Data&lt;/h3&gt;

&lt;p&gt;Typically, the response would include a list of items in the collection. For a
single resource, this collection would be a list of a single element. The
properties of each element are given by explicit name/value pairs within a
&lt;code&gt;data&lt;/code&gt; attribute as in the following example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;collection&amp;quot;: {
        &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
        &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player&amp;quot;,
        &amp;quot;items&amp;quot;: [
            {
                &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot;,
                &amp;quot;data&amp;quot;: [
                      { &amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;1234567890&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot; },
                      { &amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot; },
                      { &amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;soofaloofa&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot; }
                ]
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;Links&lt;/h3&gt;

&lt;p&gt;Links can be a property of the collection or of individual items in the
collection. Links may may also include a &lt;code&gt;name&lt;/code&gt; and a &lt;code&gt;prompt&lt;/code&gt; which can be
useful when creating HTML forms to reference the collection or item.&lt;/p&gt;

&lt;p&gt;In this example we will add links for the &lt;code&gt;Players&lt;/code&gt; avatar and friends.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;collection&amp;quot;: {
        &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
        &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player&amp;quot;,
        &amp;quot;items&amp;quot;: [
            {
                &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot;,
                &amp;quot;data&amp;quot;: [
                      {&amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;1234567890&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;soofaloofa&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot;}
                ],
                &amp;quot;links&amp;quot;: [
                    {&amp;quot;rel&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Avatar&amp;quot;, &amp;quot;render&amp;quot;: &amp;quot;image&amp;quot; },
                    {&amp;quot;rel&amp;quot;: &amp;quot;friends&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Friends&amp;quot; }
                ]
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;Templates&lt;/h3&gt;

&lt;p&gt;As the name would imply, Collection+JSON is uniquely suited to handling
collections. Templates are one aspect of this. A template is an object that
represents an item in the collection. The client can then fill in this template
and POST it to the collection to add an element, or PUT it to update an existing
item.&lt;/p&gt;

&lt;p&gt;In this example we define a template for adding to the user&amp;rsquo;s list of friends.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;collection&amp;quot;:
    {
        &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
        &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;,
        &amp;quot;links&amp;quot;: [
            {&amp;quot;rel&amp;quot;: &amp;quot;next&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends?page=2&amp;quot;}
        ],
        &amp;quot;items&amp;quot;: [
            {
                &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109&amp;quot;,
                &amp;quot;data&amp;quot;: [
                      {&amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;1895638109&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;Sheldon Dong&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;sdong&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot;}
                ],
                &amp;quot;links&amp;quot;: [
                    {&amp;quot;rel&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/avatar.png&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Avatar&amp;quot;, &amp;quot;render&amp;quot;: &amp;quot;image&amp;quot; },
                    {&amp;quot;rel&amp;quot;: &amp;quot;friends&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/friends&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Friends&amp;quot; }
                ]
            },
            {
                &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509&amp;quot;,
                &amp;quot;data&amp;quot;: [
                      {&amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;8371023509&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;Martin Liu&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;mliu&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot;}
                ],
                &amp;quot;links&amp;quot;: [
                    {&amp;quot;rel&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/avatar.png&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Avatar&amp;quot;, &amp;quot;render&amp;quot;: &amp;quot;image&amp;quot; },
                    {&amp;quot;rel&amp;quot;: &amp;quot;friends&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/friends&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Friends&amp;quot; }
                ]
            }
        ],
        &amp;quot;template&amp;quot;: {
            &amp;quot;data&amp;quot;: [
                {&amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot;},
                {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot;},
                {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot;},
                {&amp;quot;name&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Avatar&amp;quot;}
            ]
        }
        
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add a friend to this collection you would POST the data specified by the
template to the &lt;code&gt;href&lt;/code&gt; link defined by the collection
(&lt;code&gt;https://api.example.com/player/1234567890/friends&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;Queries&lt;/h3&gt;

&lt;p&gt;The final piece of Collecion+JSON is the &lt;code&gt;queries&lt;/code&gt; property. Queries, as the
name implies, define the queries that are supported by this collection. Here the
&lt;code&gt;data&lt;/code&gt; object specifies the query parameters supported by the server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;collection&amp;quot;:
    {
        &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
        &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;,
        &amp;quot;links&amp;quot;: [
            {&amp;quot;rel&amp;quot;: &amp;quot;next&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends?page=2&amp;quot;}
        ],
        &amp;quot;items&amp;quot;: [
            {
                &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109&amp;quot;,
                &amp;quot;data&amp;quot;: [
                      {&amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;1895638109&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;Sheldon Dong&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;sdong&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot;}
                ],
                &amp;quot;links&amp;quot;: [
                    {&amp;quot;rel&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/avatar.png&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Avatar&amp;quot;, &amp;quot;render&amp;quot;: &amp;quot;image&amp;quot; },
                    {&amp;quot;rel&amp;quot;: &amp;quot;friends&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/friends&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Friends&amp;quot; }
                ]
            },
            {
                &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509&amp;quot;,
                &amp;quot;data&amp;quot;: [
                      {&amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;8371023509&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;Martin Liu&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;mliu&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot;}
                ],
                &amp;quot;links&amp;quot;: [
                    {&amp;quot;rel&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/avatar.png&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Avatar&amp;quot;, &amp;quot;render&amp;quot;: &amp;quot;image&amp;quot; },
                    {&amp;quot;rel&amp;quot;: &amp;quot;friends&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/friends&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Friends&amp;quot; }
                ]
            }
        ],
        &amp;quot;queries&amp;quot;: [
            {
                &amp;quot;rel&amp;quot;: &amp;quot;search&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends/search&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Search&amp;quot;,
                &amp;quot;data&amp;quot;: [
                    {&amp;quot;name&amp;quot;: &amp;quot;search&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;}
                ]
            }
        ],
        &amp;quot;template&amp;quot;: {
            &amp;quot;data&amp;quot;: [
                {&amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot; },
                {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot;},
                {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot;},
                {&amp;quot;name&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Avatar&amp;quot;}
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By defining the template and queries within the response Collection+JSON makes
navigation by a new API user relatively simple without needing to understand the
full meaning of the API. It also provides a level of interoperability between
APIs using the Collection+JSON media type. Collection+JSON was designed by &lt;a href=&#34;https://amundsen.com&#34;&gt;Mike
Amundsen&lt;/a&gt;. You can find detailed examples, the full spec
and sample code &lt;a href=&#34;https://amundsen.com/media-types/collection/&#34;&gt;on his website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;SIREN&lt;/h2&gt;

&lt;p&gt;The last media type we&amp;rsquo;ll look at is
&lt;a href=&#34;https://github.com/kevinswiber/siren&#34;&gt;SIREN&lt;/a&gt;. SIREN aims to represent generic
entities along with actions for modifying those entities and links for client
navigation.&lt;/p&gt;

&lt;h3 id=&#34;toc_13&#34;&gt;Entities&lt;/h3&gt;

&lt;p&gt;Each SIREN entity may have an optional class that describes the nature of the
entity. This class defines the type of resource being returned by the API.
Think of this as a data model for your API. By defining our response as
returning a &lt;code&gt;player&lt;/code&gt; class the API user can immediately gain insight about the
data being returned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;class&amp;quot;: &amp;quot;player&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_14&#34;&gt;Properties&lt;/h3&gt;

&lt;p&gt;The state of the entity is reflected as key-value pairs in a &lt;code&gt;properties&lt;/code&gt; object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;class&amp;quot;: &amp;quot;player&amp;quot;,
    &amp;quot;properties&amp;quot;: {
        &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
        &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
        &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_15&#34;&gt;Links&lt;/h3&gt;

&lt;p&gt;Links are used in the same sense we&amp;rsquo;ve already seen in other media types &amp;ndash;
navigating to related resources. With SIREN links have a relation and a URL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;class&amp;quot;: &amp;quot;player&amp;quot;,
    &amp;quot;links&amp;quot;: [
        { &amp;quot;rel&amp;quot;: [ &amp;quot;self&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot; },
        { &amp;quot;rel&amp;quot;: [ &amp;quot;friends&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot; }
    ],
    &amp;quot;properties&amp;quot;: {
        &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
        &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
        &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_16&#34;&gt;Actions&lt;/h3&gt;

&lt;p&gt;One of the biggest pieces missing from common Hypermedia types is the ability to
dictate what requests can be made to alter the application state. SIREN
facilitates this by defining &lt;code&gt;actions&lt;/code&gt; that a client can take on the given
resource.&lt;/p&gt;

&lt;p&gt;SIREN actions show the available HTTP request method and includes the URL for
the request along with fields or variables that the URL accepts. As an example,
our resource for listing a players friends can offer an action to add a
friend to the list, or search for a friend.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GET https://api.example.com/player/1234567890/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;class&amp;quot;: &amp;quot;player&amp;quot;,
    &amp;quot;links&amp;quot;: [
        {&amp;quot;rel&amp;quot;: [ &amp;quot;self&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;},
        {&amp;quot;rel&amp;quot;: [ &amp;quot;next&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends?page=2&amp;quot;}
    ],
    &amp;quot;actions&amp;quot;: [{
        &amp;quot;class&amp;quot;: &amp;quot;add-friend&amp;quot;,
        &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;,
        &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;,
        &amp;quot;fields&amp;quot;: [
            {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;href&amp;quot;}
        ]
    }],
    &amp;quot;properties&amp;quot;: {
        &amp;quot;size&amp;quot;: &amp;quot;2&amp;quot;
    },
    &amp;quot;entities&amp;quot;: [
        { 
            &amp;quot;links&amp;quot;: [ 
                {&amp;quot;rel&amp;quot;: [ &amp;quot;self&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109&amp;quot;},
                {&amp;quot;rel&amp;quot;: [ &amp;quot;friends&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/friends&amp;quot;}
            ],
            &amp;quot;properties&amp;quot;: {
                &amp;quot;playerId&amp;quot;: &amp;quot;1895638109&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Sheldon Dong&amp;quot;,
                &amp;quot;alternateName&amp;quot;: &amp;quot;sdong&amp;quot;,
                &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/avatar.png&amp;quot;
            }
        },
        { 
            &amp;quot;links&amp;quot;: [
                {&amp;quot;rel&amp;quot;: [ &amp;quot;self&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509&amp;quot;},
                {&amp;quot;rel&amp;quot;: [ &amp;quot;friends&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/friends&amp;quot; }
            ],
            &amp;quot;properties&amp;quot;: {
                &amp;quot;playerId&amp;quot;: &amp;quot;8371023509&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Martin Liu&amp;quot;,
                &amp;quot;alternateName&amp;quot;: &amp;quot;mliu&amp;quot;,
                &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/avatar.png&amp;quot;
            }
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_17&#34;&gt;Entities&lt;/h3&gt;

&lt;p&gt;The previous example also introduces &lt;code&gt;entities&lt;/code&gt; to the response.  Any related
entities that you wish to embed in the current representation are entered as a
list of &lt;code&gt;entities&lt;/code&gt;. Entities are nested. Each entity in this list can have a
class, properties and additional entities.&lt;/p&gt;

&lt;h2 id=&#34;toc_18&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve create a &lt;a href=&#34;https://gist.github.com/soofaloofa/9350847&#34;&gt;Gist&lt;/a&gt; comparing each
of the media types discussed in this post.&lt;/p&gt;

&lt;p&gt;After going through this exercise I&amp;rsquo;ve come to a few conclusions.&lt;/p&gt;

&lt;h3 id=&#34;toc_19&#34;&gt;JSON-LD&lt;/h3&gt;

&lt;p&gt;JSON-LD is great for augmenting existing APIs without introducing
breaking changes. This augmentation mostly serves as a way to self document your
API. If you are looking to add operations to a JSON-LD response look to HYDRA.
HYDRA adds a vocabulary for communicating using the JSON-LD specification. This
is an interesting choice as it decouples the API serialization format from the
communication format.&lt;/p&gt;

&lt;h3 id=&#34;toc_20&#34;&gt;HAL&lt;/h3&gt;

&lt;p&gt;The light weight syntax and semantics of HAL is appealing in a lot of contexts.
HAL is a minimal representation that offers most of the benefits of using a
hypermedia type without adding too much complexity to the implementation. One
area where HAL falters is, like JSON-LD, the lack of support for specifying
actions.&lt;/p&gt;

&lt;h3 id=&#34;toc_21&#34;&gt;Collection+JSON&lt;/h3&gt;

&lt;p&gt;Don&amp;rsquo;t be fooled by the name. Collection+JSON can be used to represent single
items as well and it does this quite well. Of course it shines when representing
data collections. Particularly appealing is the ability to list queries that
your collection supports and templates that clients can use to alter your
collection. For publishing user editable data Collection+JSON shines.&lt;/p&gt;

&lt;h3 id=&#34;toc_22&#34;&gt;SIREN&lt;/h3&gt;

&lt;p&gt;SIREN attempts to represent generic classes of items and overcome the main
drawback of HAL &amp;ndash; support for actions. It does this admirably well and also
introduces the concept of classes to your model bringing a sense of type
information to your API responses.&lt;/p&gt;

&lt;h3 id=&#34;toc_23&#34;&gt;And the winner is?&lt;/h3&gt;

&lt;p&gt;Unfortunately, there is no clear winner. It depends on the contraints in place
on your API. However, I will offer some suggestions.&lt;/p&gt;

&lt;p&gt;If you are augmenting existing API responses choose JSON-LD.
If you are keeping it simple choose HAL.
If you are looking for a full featured media type choose Collection+JSON.&lt;/p&gt;

&lt;p&gt;Did I cover all the bases? Completely miss the mark? Let me know in the
comments!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
