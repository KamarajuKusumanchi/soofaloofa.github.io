<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Json on Kevin Sookocheff </title>
    <link>http://sookocheff.com/tags/json/index.xml</link>
    <language>en-us</language>
    <copyright>Copyright Kevin Sookocheff.</copyright>
    <updated>Tue, 08 Apr 2014 16:12:14 UTC</updated>
    
    <item>
      <title>Understanding JSON Patch</title>
      <link>http://sookocheff.com/posts/2014-04-08-understanding-json-patch</link>
      <pubDate>Tue, 08 Apr 2014 16:12:14 UTC</pubDate>
      <author>Kevin Sookocheff</author>
      <guid>http://sookocheff.com/posts/2014-04-08-understanding-json-patch</guid>
      <description>

&lt;p&gt;The typical update cycle for an API resource is to (1) GET the representation, (2) modify it and (3) PUT back the entire representation. This can waste bandwidth and processing time for large resources. An alternative is to use the &lt;a href=&#34;https://tools.ietf.org/html/rfc5789&#34;&gt;HTTP PATCH&lt;/a&gt; extension method to only send the differences between two resources. HTTP PATCH applies a set of changes to the document referenced by the HTTP request.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;PATCH /file.txt HTTP/1.1
Host: sookocheff.com
Content-Type: application/json
If-Match: &amp;quot;e0036bbc6f&amp;quot;

[description of changes]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The format of the PATCH request body differs depending on the representation of the resource. For JSON documents, &lt;a href=&#34;https://tools.ietf.org/html/rfc6902&#34;&gt;JSON Patch&lt;/a&gt; defines this format.&lt;/p&gt;

&lt;p&gt;A JSON Patch document is a sequential list of operations to be applied to an object. Each operation is a JSON object having exactly one &lt;code&gt;op&lt;/code&gt; member.
Valid operations are &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;move&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt;. Any other operation is considered an error.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{ &amp;quot;op&amp;quot;: &amp;quot;add&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each operation must also have exactly one &lt;code&gt;path&lt;/code&gt; member.
The &lt;code&gt;path&lt;/code&gt; member is a &lt;a href=&#34;https://tools.ietf.org/html/rfc6901&#34;&gt;JSON Pointer&lt;/a&gt; that determines a location within the JSON document to modify.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{ &amp;quot;op&amp;quot;: &amp;quot;add&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/player/name&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The remaining elements of a JSON Patch operation depend on the particular operation being performed.&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;add&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;add&lt;/code&gt; operation is used in different ways depending on the target of the &lt;code&gt;path&lt;/code&gt; being referenced. Generally speaking we can use &lt;code&gt;add&lt;/code&gt; to append to a list, add a member to an object or update the value of an existing field. The &lt;code&gt;add&lt;/code&gt; operation accepts a &lt;code&gt;value&lt;/code&gt; member which is the value to update the referenced &lt;code&gt;path&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;Append to a List&lt;/h4&gt;

&lt;p&gt;To append a value to a list you use an existing list as the &lt;code&gt;path&lt;/code&gt; of the operation. So, given the JSON document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;{
    &amp;quot;orders&amp;quot;: [{&amp;quot;id&amp;quot;: 123}, {&amp;quot;id&amp;quot;: 456}]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can append an order to the list using the &lt;code&gt;add&lt;/code&gt; operation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;{ &amp;quot;op&amp;quot;: &amp;quot;add&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/orders&amp;quot;, &amp;quot;value&amp;quot;: {&amp;quot;id&amp;quot;: 789} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After applying the patch we get the final document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;{
    &amp;quot;orders&amp;quot;: [{&amp;quot;id&amp;quot;: 123}, {&amp;quot;id&amp;quot;: 456}, {&amp;quot;id&amp;quot;: 789}]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;Add a Member to an Object&lt;/h4&gt;

&lt;p&gt;If the &lt;code&gt;path&lt;/code&gt; references a member of an object that does not exist, a new member is added to the object. We start with our JSON document listing our orders.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;orders&amp;quot;: [{&amp;quot;id&amp;quot;: 123}, {&amp;quot;id&amp;quot;: 456}, {&amp;quot;id&amp;quot;: 789&amp;quot;}]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this JSON Patch document we can add a total and a currency member to the document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;[
{ &amp;quot;op&amp;quot;: &amp;quot;add&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/total&amp;quot;, &amp;quot;value&amp;quot;: 20.00 },
{ &amp;quot;op&amp;quot;: &amp;quot;add&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/currency&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;USD&amp;quot; }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After applying the patch we get the final representation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;orders&amp;quot;: [{&amp;quot;id&amp;quot;: 123}, {&amp;quot;id&amp;quot;: 456}, {&amp;quot;id&amp;quot;: 789}],
    &amp;quot;total&amp;quot;: 20.00,
    &amp;quot;currency&amp;quot;: &amp;quot;USD&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Update an Existing Member of an Object&lt;/h4&gt;

&lt;p&gt;If the &lt;code&gt;path&lt;/code&gt; refers to an existing object member, that member is updated with the newly supplied value.&lt;/p&gt;

&lt;p&gt;Given the JSON document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;orders&amp;quot;: [{&amp;quot;id&amp;quot;: 123}, {&amp;quot;id&amp;quot;: 456}, {&amp;quot;id&amp;quot;: 789}],
    &amp;quot;total&amp;quot;: 20.00,
    &amp;quot;currency&amp;quot;: &amp;quot;USD&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can update the total by using an &lt;code&gt;add&lt;/code&gt; operation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{ &amp;quot;op&amp;quot;: &amp;quot;add&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/total&amp;quot;, &amp;quot;value&amp;quot;: 30.00 },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Leaving the final result.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;orders&amp;quot;: [{&amp;quot;id&amp;quot;: 123}, {&amp;quot;id&amp;quot;: 456}, {&amp;quot;id&amp;quot;: 789}],
    &amp;quot;total&amp;quot;: 30.00,
    &amp;quot;currency&amp;quot;: &amp;quot;USD&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;remove&lt;/h3&gt;

&lt;p&gt;Remove is a simple operation. The target location of the &lt;code&gt;path&lt;/code&gt; is removed from the object.&lt;/p&gt;

&lt;p&gt;Starting with the following document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;orders&amp;quot;: [{&amp;quot;id&amp;quot;: 123}, {&amp;quot;id&amp;quot;: 456}, {&amp;quot;id&amp;quot;: 789}],
    &amp;quot;total&amp;quot;: 30.00,
    &amp;quot;currency&amp;quot;: &amp;quot;USD&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can remove the &lt;code&gt;currency&lt;/code&gt; member with a &lt;code&gt;remove&lt;/code&gt; operation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{ &amp;quot;op&amp;quot;: &amp;quot;remove&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/currency&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;orders&amp;quot;: [{&amp;quot;id&amp;quot;: 123}, {&amp;quot;id&amp;quot;: 456}, {&amp;quot;id&amp;quot;: 789}],
    &amp;quot;total&amp;quot;: 30.00
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also remove an element from an array. All remaining elements are shifted one position to the left. To remove order &lt;code&gt;456&lt;/code&gt; we can remove the array index referencing this order.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{ &amp;quot;op&amp;quot;: &amp;quot;remove&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/orders/1&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;orders&amp;quot;: [{&amp;quot;id&amp;quot;: 123}, {&amp;quot;id&amp;quot;: 789}],
    &amp;quot;total&amp;quot;: 30.00
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;replace&lt;/h3&gt;

&lt;p&gt;Replace is used to set a new value to a member of the object. It is logically equivalent to a &lt;code&gt;remove&lt;/code&gt; operation followed by an &lt;code&gt;add&lt;/code&gt; operation to the same &lt;code&gt;path&lt;/code&gt; or to an &lt;code&gt;add&lt;/code&gt; operation to an existing member.&lt;/p&gt;

&lt;p&gt;Given the following JSON document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;orders&amp;quot;: [{&amp;quot;id&amp;quot;: 123}, {&amp;quot;id&amp;quot;: 456}, {&amp;quot;id&amp;quot;: 789}],
    &amp;quot;total&amp;quot;: 20.00,
    &amp;quot;currency&amp;quot;: &amp;quot;USD&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can apply the &lt;code&gt;replace&lt;/code&gt; operation to update the order total.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{ &amp;quot;op&amp;quot;: &amp;quot;replace&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/total&amp;quot;, &amp;quot;value&amp;quot;: 30.00 },
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;orders&amp;quot;: [{&amp;quot;id&amp;quot;: 123}, {&amp;quot;id&amp;quot;: 456}, {&amp;quot;id&amp;quot;: 789}],
    &amp;quot;total&amp;quot;: 30.00,
    &amp;quot;currency&amp;quot;: &amp;quot;USD&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;move&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;move&lt;/code&gt; operation removes the value at a specified location and adds it to the target location. The removal location is given by a &lt;code&gt;from&lt;/code&gt; member and the target location is given by the &lt;code&gt;path&lt;/code&gt; member.&lt;/p&gt;

&lt;p&gt;Given this starting document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;orders&amp;quot;: [{&amp;quot;id&amp;quot;: 123}, {&amp;quot;id&amp;quot;: 456}, {&amp;quot;id&amp;quot;: 789}],
    &amp;quot;total&amp;quot;: 30.00,
    &amp;quot;currency&amp;quot;: &amp;quot;USD&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can move an order to the root of the document by applying this JSON patch.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;json
{ &amp;quot;op&amp;quot;: &amp;quot;move&amp;quot;, &amp;quot;from&amp;quot;: &amp;quot;/orders/0&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/rootOrder&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;orders&amp;quot;: [{&amp;quot;id&amp;quot;: 456}, {&amp;quot;id&amp;quot;: 789}],
    &amp;quot;rootOrder&amp;quot;: {&amp;quot;id&amp;quot;: 123}, 
    &amp;quot;total&amp;quot;: 30.00,
    &amp;quot;currency&amp;quot;: &amp;quot;USD&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;copy&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;copy&lt;/code&gt; is like &lt;code&gt;move&lt;/code&gt;. It copies the value at the &lt;code&gt;from&lt;/code&gt; location to the  &lt;code&gt;path&lt;/code&gt; location, leaving duplicates of the data at each location.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{ &amp;quot;op&amp;quot;: &amp;quot;copy&amp;quot;, &amp;quot;from&amp;quot;: &amp;quot;/orders/0&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/rootOrder&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;test&lt;/h3&gt;

&lt;p&gt;The HTTP PATCH method is atomic and the patch should only be applied if all operations can be safely applied. The &lt;code&gt;test&lt;/code&gt; operation can offer additional validation to ensure that patch preconditions or postconditions are met. If the test fails the whole patch is discarded. &lt;code&gt;test&lt;/code&gt; is strictly an equality check.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{ &amp;quot;op&amp;quot;: &amp;quot;test&amp;quot;, &amp;quot;value&amp;quot;: 30.00, &amp;quot;path&amp;quot;: &amp;quot;/total&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;JSON Patch is an effective way to provide diffs of your API resources. Most languages already have an implementation available. There is no reason not to adopt the HTTP PATCH today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On choosing a hypermedia type for your API - HAL, JSON-LD, Collection&#43;JSON, SIREN, Oh My!</title>
      <link>http://sookocheff.com/posts/2014-03-11-on-choosing-a-hypermedia-format</link>
      <pubDate>Tue, 11 Mar 2014 15:15:15 UTC</pubDate>
      <author>Kevin Sookocheff</author>
      <guid>http://sookocheff.com/posts/2014-03-11-on-choosing-a-hypermedia-format</guid>
      <description>

&lt;p&gt;In recent years REST has been at the forefront of modern API
design. This has led to APIs with manageable URLs that respect the HTTP verbs
(GET, POST, PUT &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616.html&#34;&gt;and the
 rest&lt;/a&gt;), producing an
intuitive model for client developers. Unfortunately, there are two problems
that REST doesn&amp;rsquo;t solve alone.&lt;/p&gt;

&lt;p&gt;The first problem is standardized responses. Most every enterprise has defined
their own custom API format, usually a JSON response that maps neatly to their
own data model. A Facebook API client cannot communicate with a Twitter API and
vice versa. This leads to a proliferation of API clients that do almost &amp;ndash; but
not quite &amp;ndash; the same thing. Duplication of effort abounds.&lt;/p&gt;

&lt;p&gt;The second problem is linking. As the &lt;a href=&#34;https://www.w3.org/TR/json-ld/#basic-concepts&#34;&gt;W3C puts it&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JSON has no built-in support for hyperlinks, which are a fundamental building
block on the Web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The drawback of this is that two API endpoints are only linked together by API
documentation. As a user you are forced to scour through walls of API
documentation to understand the relationships between API endpoints and grasp
exactly what actions you can and cannot take against a given resource.&lt;/p&gt;

&lt;p&gt;To solve these problems we can look at how we structure our API responses. By
using &lt;em&gt;hypermedia&lt;/em&gt; in our responses we can offer links between API endpoints and
documentation, potential actions, and related endpoints. This allows for
&lt;em&gt;discoverable&lt;/em&gt; APIs where it is clear from the API response the set of next
actions that a client may want to take. Furthermore, by &lt;em&gt;standardizing&lt;/em&gt; on a
hypermedia type clients developed for one API can understand the format of
another API and communicate with minimal duplicated effort.&lt;/p&gt;

&lt;p&gt;In this post I will evaluate a few mature hypermedia types for APIs,
offering a side-by-side comparison of their strengths and weaknesses. If you
are impatient for the final result you can &lt;a href=&#34;https://gist.github.com/soofaloofa/9350847&#34;&gt;jump straight to the code&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;The Model&lt;/h2&gt;

&lt;p&gt;To drive this discussion let&amp;rsquo;s use a hypothetical API for managing a &lt;code&gt;Player&lt;/code&gt;
resource derived from the &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/GameKit/Reference/GKPlayer_Ref/Reference/Reference.html#//apple_ref/occ/cl/GKPlayer&#34;&gt;&lt;code&gt;GKPlayer&lt;/code&gt;
class&lt;/a&gt;
used by Apple&amp;rsquo;s GameCenter API. The &lt;code&gt;Player&lt;/code&gt; resource can be expressed with this
simple diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2014-02-06-on-choosing-a-hypermedia-format/player-model.png&#34; alt=&#34;PlayerResource&#34; title=&#34;Player Resource&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Representing this as a typical JSON response would yield something like the
following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;alias&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;displayName&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;profilePhotoUrl&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the list of this player&amp;rsquo;s friends could be retrieved with a separate API call.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;[
{
    &amp;quot;playerId&amp;quot;: &amp;quot;1895638109&amp;quot;,
    &amp;quot;alias&amp;quot;: &amp;quot;sdong&amp;quot;,
    &amp;quot;displayName&amp;quot;: &amp;quot;Sheldon Dong&amp;quot;,
    &amp;quot;profilePhotoUrl&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/avatar.png&amp;quot;
},
{
    &amp;quot;playerId&amp;quot;: &amp;quot;8371023509&amp;quot;,
    &amp;quot;alias&amp;quot;: &amp;quot;mliu&amp;quot;,
    &amp;quot;displayName&amp;quot;: &amp;quot;Martin Liu&amp;quot;,
    &amp;quot;profilePhotoUrl&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/avatar.png&amp;quot;
}
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at how this API can be represented using hypermedia types.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;JSON-LD&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll start by looking at JSON for Linked Documents (JSON-LD). JSON-LD is a well
supported media type endorsed by the &lt;a href=&#34;https://www.w3.org&#34;&gt;World Wide Web
Consortium&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The selling point of JSON-LD is that you can adopt the standard without
introducing breaking changes to your API. The syntax is designed to not disturb
already deployed systems and to provide a smooth migration path from JSON to
JSON with added semantics.&lt;/p&gt;

&lt;p&gt;JSON-LD introduces keywords that augment an existing response with additional
information. The most important augmentation is the &lt;em&gt;context&lt;/em&gt;. A context in
JSON-LD defines a set of terms that are scoped and valid within the
representation being discussed. A context is assigned to a JSON response using
the &lt;code&gt;@context&lt;/code&gt; keyword.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
  &amp;quot;@context&amp;quot;: {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within the context properties are assigned to a URL that provides documentation
about the meaning of that property.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;@context&amp;quot;: {
        &amp;quot;displayName&amp;quot;: &amp;quot;https://schema.org/name&amp;quot;
    },
    &amp;quot;displayName&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a good idea to use standard naming for our APIs so we can go ahead and
rename &lt;code&gt;displayName&lt;/code&gt; to &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;@context&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;https://schema.org/name&amp;quot;
    },
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point we have an unambiguous definition of what the property &lt;code&gt;name&lt;/code&gt;
means within the API response by visiting &lt;code&gt;https://schema.org/name&lt;/code&gt; to read the
semantics of this property. We can go further and add context to the rest of the
properties. To be consistent with existent naming we will change
&lt;code&gt;profilePhotoUrl&lt;/code&gt; to &lt;code&gt;image&lt;/code&gt; and &lt;code&gt;alias&lt;/code&gt; to &lt;code&gt;alternateName&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;@context&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;https://schema.org/name&amp;quot;,
        &amp;quot;alternateName&amp;quot;: &amp;quot;https://schema.org/alternateName&amp;quot;,
        &amp;quot;image&amp;quot;: {
            &amp;quot;@id&amp;quot;: &amp;quot;https://schema.org/image&amp;quot;,
            &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot;
        }
    },
    &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot;,
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example we&amp;rsquo;ve added the &lt;code&gt;@id&lt;/code&gt; annotation. &lt;code&gt;@id&lt;/code&gt; signifies &lt;em&gt;identifiers&lt;/em&gt;.
Identifiers allow unique external references to any resource, providing similar
semantcis to URLs. In JSON-LD terminology every distinct resource is a node in
the JSON-LD graph. These distinct nodes should have identifiers that can be used
to retrieve a representation of that node.&lt;/p&gt;

&lt;p&gt;The last element from our model that is missing from our JSON-LD response is the
list of friends. With JSON-LD unordered lists can be specified using simple
array notation.  In this example we will represent friends by the identifiers
that point to their resources. An HTTP GET request to those URLs would return
the full representation of each friend.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;@context&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;https://schema.org/name&amp;quot;,
        &amp;quot;alternateName&amp;quot;: &amp;quot;https://schema.org/alternateName&amp;quot;,
        &amp;quot;image&amp;quot;: {
            &amp;quot;@id&amp;quot;: &amp;quot;https://schema.org/image&amp;quot;,
            &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot;
        },
        &amp;quot;friends&amp;quot;: {
            &amp;quot;@container&amp;quot;: &amp;quot;@set&amp;quot;
         }
    },
    &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot;,
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;,
    &amp;quot;friends&amp;quot;: [ 
        {
            &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/1895638109&amp;quot;
        },
        {
            &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/8371023509&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us the representation of our &lt;code&gt;Player&lt;/code&gt; resource in JSON-LD. This
example doesn&amp;rsquo;t cover all of JSON-LD but should give you a flavour of how the
format can be used.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/markuslanthaler&#34;&gt;Markus Lanthaler&lt;/a&gt; for offering
suggestions on how to simplify this even more. In this example we define a
&lt;code&gt;@vocab&lt;/code&gt; for our context that encompasses the terms that we use within our
response. Our list of friends is provided as a simple link to a separate
endpoint.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;@context&amp;quot;: {
        &amp;quot;@vocab&amp;quot;: &amp;quot;https://schema.org/&amp;quot;,
        &amp;quot;image&amp;quot;: { &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot; },
        &amp;quot;friends&amp;quot;: { &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot; }
    },
    &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot;,
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;,
    &amp;quot;friends&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to dive fully into JSON-LD you can always read
the &lt;a href=&#34;https://www.w3.org/TR/json-ld/&#34;&gt;specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;JSON-LD lacks support for specifying the actions you can take on a resource. To
address this short-coming &lt;a href=&#34;http://www.markus-lanthaler.com/hydra/&#34;&gt;HYDRA&lt;/a&gt;
provides a vocabulary allowing client-server communication using the JSON-LD
message format.&lt;/p&gt;

&lt;p&gt;To specify the actions available on a resource we would use the &lt;code&gt;operation&lt;/code&gt;
property.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;@context&amp;quot;: [
        &amp;quot;http://www.w3.org/ns/hydra/core&amp;quot;,
        {
            &amp;quot;@vocab&amp;quot;: &amp;quot;https://schema.org/&amp;quot;,
            &amp;quot;image&amp;quot;: { &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot; },
            &amp;quot;friends&amp;quot;: { &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot; }
        }
    ],
    &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;,
    &amp;quot;operation&amp;quot;: {
        &amp;quot;@type&amp;quot;: &amp;quot;BefriendAction&amp;quot;,
        &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;,
        &amp;quot;expects&amp;quot;: {
            &amp;quot;@id&amp;quot;: &amp;quot;http://schema.org/Person&amp;quot;,
            &amp;quot;supportedProperty&amp;quot;: [
                { &amp;quot;property&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;range&amp;quot;: &amp;quot;Text&amp;quot; },
                { &amp;quot;property&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;range&amp;quot;: &amp;quot;Text&amp;quot; },
                { &amp;quot;property&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;range&amp;quot;: &amp;quot;URL&amp;quot; }
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;operation&lt;/code&gt; property defines a &lt;code&gt;method&lt;/code&gt; term that specifies the HTTP method
that the endpoint allows. HYDRA also provides a template of the expected
properties and their data types. In our example a POST request to
&lt;code&gt;https://api.example.com/player/1234567890/friends&lt;/code&gt; (the resource&amp;rsquo;s URL) will
add a new friend to our user&amp;rsquo;s friend list.&lt;/p&gt;

&lt;p&gt;HYDRA also provides a &lt;code&gt;member&lt;/code&gt; property that allows us to embed additional
resources within our current representations. In the following example we embed
our friends directly within the resource as a list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET https://api.example.com/player/1234567890/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;@context&amp;quot;: [
        &amp;quot;http://www.w3.org/ns/hydra/core&amp;quot;,
        {
            &amp;quot;@vocab&amp;quot;: &amp;quot;https://schema.org/&amp;quot;,
            &amp;quot;image&amp;quot;: { &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot; },
            &amp;quot;friends&amp;quot;: { &amp;quot;@type&amp;quot;: &amp;quot;@id&amp;quot; }
        }
    ],
    &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;,
    &amp;quot;operation&amp;quot;: {
        &amp;quot;@type&amp;quot;: &amp;quot;BefriendAction&amp;quot;,
        &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;,
        &amp;quot;expects&amp;quot;: {
            &amp;quot;@id&amp;quot;: &amp;quot;http://schema.org/Person&amp;quot;,
            &amp;quot;supportedProperty&amp;quot;: [
                { &amp;quot;property&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;range&amp;quot;: &amp;quot;Text&amp;quot; },
                { &amp;quot;property&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;range&amp;quot;: &amp;quot;Text&amp;quot; },
                { &amp;quot;property&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;range&amp;quot;: &amp;quot;URL&amp;quot; }
            ]
        }
    },
    &amp;quot;member&amp;quot;: [
            {
                &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/1895638109&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Sheldon Dong&amp;quot;,
                &amp;quot;alternateName&amp;quot;: &amp;quot;sdong&amp;quot;,
                &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/avatar.png&amp;quot;,
                &amp;quot;friends&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/friends&amp;quot;
            },
            {
                &amp;quot;@id&amp;quot;: &amp;quot;https://api.example.com/player/8371023509&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Martin Liu&amp;quot;,
                &amp;quot;alternateName&amp;quot;: &amp;quot;mliu&amp;quot;,
                &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/avatar.png&amp;quot;,
                &amp;quot;friends&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/friends&amp;quot;
            }
        ],
    &amp;quot;nextPage&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends?page=2&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ve also added a &lt;code&gt;nextPage&lt;/code&gt; property which is a property defined by HYDRA for
paged collections. For more details on HYDRA&amp;rsquo;s reserved properties you can read
the full
&lt;a href=&#34;http://www.markus-lanthaler.com/hydra/spec/latest/core/#properties&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;HAL&lt;/h2&gt;

&lt;p&gt;HAL is a lightweight media type that uses the idea of &lt;em&gt;Resources&lt;/em&gt; and &lt;em&gt;Links&lt;/em&gt; to
model your JSON responses. &lt;em&gt;Resources&lt;/em&gt; can contain &lt;em&gt;State&lt;/em&gt; defined by key-value
pairs of data, &lt;em&gt;Links&lt;/em&gt; leading to additional resources and &lt;em&gt;Embedded Resources&lt;/em&gt;
which are children of the current resource embedded in the representation for
convenience.&lt;/p&gt;

&lt;p&gt;HAL is simple to use and easy to understand. These virtues have lead HAL to
become one of the leading hypermedia types in modern APIs.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;State&lt;/h3&gt;

&lt;p&gt;State is the traditional JSON key-value pairs defining the current state of the
resource.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Links&lt;/h3&gt;

&lt;p&gt;Links in HAL are identified as a JSON object named &lt;code&gt;_links&lt;/code&gt;. Keys within
&lt;code&gt;_links&lt;/code&gt; are the name of the link and should describe the relationship between
the current resource and the link. At a minimum the &lt;code&gt;_links&lt;/code&gt; property should
contain a &lt;code&gt;self&lt;/code&gt; entry pointing to the current resource.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;_links&amp;quot;: {
        &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot; }
    },
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can easily add a link to the &lt;code&gt;Friends&lt;/code&gt; resource which can be used to retrieve
the full list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{

    &amp;quot;_links&amp;quot;: {
        &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot; },
        &amp;quot;friends&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot; }
    },
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Embedded Resources&lt;/h3&gt;

&lt;p&gt;Making a GET request to the &lt;code&gt;Friends&lt;/code&gt; link would return a full list of
&lt;code&gt;Player&lt;/code&gt; resources. Each &lt;code&gt;Player&lt;/code&gt; returned is embedded in the representation
as an &lt;em&gt;Embedded Resource&lt;/em&gt;. &lt;em&gt;Embedded Resources&lt;/em&gt; augment the current resource
state with additional, related resources. These resources are provided as a
convenience to the client application and can be easily used to represent a
list of items.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;_links&amp;quot;: {
        &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot; },
        &amp;quot;next&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends?page=2&amp;quot; }
    },
    &amp;quot;size&amp;quot;: &amp;quot;2&amp;quot;,
    &amp;quot;_embedded&amp;quot;: { 
        &amp;quot;player&amp;quot;: [
            { 
                &amp;quot;_links&amp;quot;: { 
                    &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109&amp;quot; },
                    &amp;quot;friends&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/friends&amp;quot; }
                },
                &amp;quot;playerId&amp;quot;: &amp;quot;1895638109&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Sheldon Dong&amp;quot;,
                &amp;quot;alternateName&amp;quot;: &amp;quot;sdong&amp;quot;,
                &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/avatar.png&amp;quot;
            },
            { 
                &amp;quot;_links&amp;quot;: { 
                    &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509&amp;quot; },
                    &amp;quot;friends&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/friends&amp;quot; }
                },
                &amp;quot;playerId&amp;quot;: &amp;quot;8371023509&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Martin Liu&amp;quot;,
                &amp;quot;alternateName&amp;quot;: &amp;quot;mliu&amp;quot;,
                &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/avatar.png&amp;quot;
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this response we&amp;rsquo;ve added a &lt;code&gt;next&lt;/code&gt; link to represent a paged collection and
provide a reference to get the next set of friends in the list. The embedded
resources are a list contained within the &lt;code&gt;player&lt;/code&gt; property.&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;Curies&lt;/h3&gt;

&lt;p&gt;An important point about HAL is that each link relation points to a URL with
documentation about that relation. This makes the API discoverable by always
providing documentation about the links available from the current resource. In
the next example a URL for &lt;code&gt;friends&lt;/code&gt; points to documentation about that resource.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;_links&amp;quot;: {
        &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot; },
        &amp;quot;https://api.example.com/docs/rels/friends&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot; }
    },
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since URLs are long and unwieldy, HAL provides &lt;code&gt;curies&lt;/code&gt;. &lt;code&gt;Curies&lt;/code&gt; are a reserved
link relation acting as a base URL that is expanded upon by each term. In this
example we will define a &lt;code&gt;curie&lt;/code&gt; &lt;code&gt;ex&lt;/code&gt; that references the &lt;code&gt;URI&lt;/code&gt;
&lt;code&gt;https://api.example.com/docs/rels/{rel}&lt;/code&gt;. &lt;code&gt;Curies&lt;/code&gt; are expanded by postfixing
the curie name with a &lt;code&gt;:&lt;/code&gt; followed by the name of the resource.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;_links&amp;quot;: {
        &amp;quot;self&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot; },
        &amp;quot;curies&amp;quot;: [{ &amp;quot;name&amp;quot;: &amp;quot;ex&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/docs/rels/{rel}&amp;quot;, &amp;quot;templated&amp;quot;: true }],
        &amp;quot;ex:friends&amp;quot;: { &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot; }
    },
    &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
    &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HAL&amp;rsquo;s lightweight syntax and model make it a popular choice for API developers
and users. For more information on HAL you can refer to the draft standard that
has been submitted to the &lt;a href=&#34;https://tools.ietf.org/html/draft-kelly-json-hal-06&#34;&gt;Network Working
Group&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Collection+JSON&lt;/h2&gt;

&lt;p&gt;The Collection+JSON standard is a media type that standardizes the reading,
writing and querying of items in a collection. Although geared to handling
collections, by representing a single item as a collection of one element,
Collection+JSON can elegantly handle most API responses.&lt;/p&gt;

&lt;p&gt;At a minimum a Collection+JSON response must contain a &lt;code&gt;collection&lt;/code&gt; object with
a &lt;code&gt;version&lt;/code&gt; and a URI pointing to itself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;collection&amp;quot;: {
        &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
        &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Returning Data&lt;/h3&gt;

&lt;p&gt;Typically, the response would include a list of items in the collection. For a
single resource, this collection would be a list of a single element. The
properties of each element are given by explicit name/value pairs within a
&lt;code&gt;data&lt;/code&gt; attribute as in the following example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;collection&amp;quot;: {
        &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
        &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player&amp;quot;,
        &amp;quot;items&amp;quot;: [
            {
                &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot;,
                &amp;quot;data&amp;quot;: [
                      { &amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;1234567890&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot; },
                      { &amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot; },
                      { &amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;soofaloofa&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot; }
                ]
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;Links&lt;/h3&gt;

&lt;p&gt;Links can be a property of the collection or of individual items in the
collection. Links may may also include a &lt;code&gt;name&lt;/code&gt; and a &lt;code&gt;prompt&lt;/code&gt; which can be
useful when creating HTML forms to reference the collection or item.&lt;/p&gt;

&lt;p&gt;In this example we will add links for the &lt;code&gt;Players&lt;/code&gt; avatar and friends.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;collection&amp;quot;: {
        &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
        &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player&amp;quot;,
        &amp;quot;items&amp;quot;: [
            {
                &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot;,
                &amp;quot;data&amp;quot;: [
                      {&amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;1234567890&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;soofaloofa&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot;}
                ],
                &amp;quot;links&amp;quot;: [
                    {&amp;quot;rel&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Avatar&amp;quot;, &amp;quot;render&amp;quot;: &amp;quot;image&amp;quot; },
                    {&amp;quot;rel&amp;quot;: &amp;quot;friends&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Friends&amp;quot; }
                ]
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;Templates&lt;/h3&gt;

&lt;p&gt;As the name would imply, Collection+JSON is uniquely suited to handling
collections. Templates are one aspect of this. A template is an object that
represents an item in the collection. The client can then fill in this template
and POST it to the collection to add an element, or PUT it to update an existing
item.&lt;/p&gt;

&lt;p&gt;In this example we define a template for adding to the user&amp;rsquo;s list of friends.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;collection&amp;quot;:
    {
        &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
        &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;,
        &amp;quot;links&amp;quot;: [
            {&amp;quot;rel&amp;quot;: &amp;quot;next&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends?page=2&amp;quot;}
        ],
        &amp;quot;items&amp;quot;: [
            {
                &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109&amp;quot;,
                &amp;quot;data&amp;quot;: [
                      {&amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;1895638109&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;Sheldon Dong&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;sdong&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot;}
                ],
                &amp;quot;links&amp;quot;: [
                    {&amp;quot;rel&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/avatar.png&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Avatar&amp;quot;, &amp;quot;render&amp;quot;: &amp;quot;image&amp;quot; },
                    {&amp;quot;rel&amp;quot;: &amp;quot;friends&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/friends&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Friends&amp;quot; }
                ]
            },
            {
                &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509&amp;quot;,
                &amp;quot;data&amp;quot;: [
                      {&amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;8371023509&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;Martin Liu&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;mliu&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot;}
                ],
                &amp;quot;links&amp;quot;: [
                    {&amp;quot;rel&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/avatar.png&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Avatar&amp;quot;, &amp;quot;render&amp;quot;: &amp;quot;image&amp;quot; },
                    {&amp;quot;rel&amp;quot;: &amp;quot;friends&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/friends&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Friends&amp;quot; }
                ]
            }
        ],
        &amp;quot;template&amp;quot;: {
            &amp;quot;data&amp;quot;: [
                {&amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot;},
                {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot;},
                {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot;},
                {&amp;quot;name&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Avatar&amp;quot;}
            ]
        }
        
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add a friend to this collection you would POST the data specified by the
template to the &lt;code&gt;href&lt;/code&gt; link defined by the collection
(&lt;code&gt;https://api.example.com/player/1234567890/friends&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;Queries&lt;/h3&gt;

&lt;p&gt;The final piece of Collecion+JSON is the &lt;code&gt;queries&lt;/code&gt; property. Queries, as the
name implies, define the queries that are supported by this collection. Here the
&lt;code&gt;data&lt;/code&gt; object specifies the query parameters supported by the server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;collection&amp;quot;:
    {
        &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
        &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;,
        &amp;quot;links&amp;quot;: [
            {&amp;quot;rel&amp;quot;: &amp;quot;next&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends?page=2&amp;quot;}
        ],
        &amp;quot;items&amp;quot;: [
            {
                &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109&amp;quot;,
                &amp;quot;data&amp;quot;: [
                      {&amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;1895638109&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;Sheldon Dong&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;sdong&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot;}
                ],
                &amp;quot;links&amp;quot;: [
                    {&amp;quot;rel&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/avatar.png&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Avatar&amp;quot;, &amp;quot;render&amp;quot;: &amp;quot;image&amp;quot; },
                    {&amp;quot;rel&amp;quot;: &amp;quot;friends&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/friends&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Friends&amp;quot; }
                ]
            },
            {
                &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509&amp;quot;,
                &amp;quot;data&amp;quot;: [
                      {&amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;8371023509&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;Martin Liu&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot;},
                      {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;mliu&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot;}
                ],
                &amp;quot;links&amp;quot;: [
                    {&amp;quot;rel&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/avatar.png&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Avatar&amp;quot;, &amp;quot;render&amp;quot;: &amp;quot;image&amp;quot; },
                    {&amp;quot;rel&amp;quot;: &amp;quot;friends&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/friends&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Friends&amp;quot; }
                ]
            }
        ],
        &amp;quot;queries&amp;quot;: [
            {
                &amp;quot;rel&amp;quot;: &amp;quot;search&amp;quot;, &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends/search&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Search&amp;quot;,
                &amp;quot;data&amp;quot;: [
                    {&amp;quot;name&amp;quot;: &amp;quot;search&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;}
                ]
            }
        ],
        &amp;quot;template&amp;quot;: {
            &amp;quot;data&amp;quot;: [
                {&amp;quot;name&amp;quot;: &amp;quot;playerId&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Identifier&amp;quot; },
                {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Full Name&amp;quot;},
                {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Alias&amp;quot;},
                {&amp;quot;name&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;prompt&amp;quot;: &amp;quot;Avatar&amp;quot;}
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By defining the template and queries within the response Collection+JSON makes
navigation by a new API user relatively simple without needing to understand the
full meaning of the API. It also provides a level of interoperability between
APIs using the Collection+JSON media type. Collection+JSON was designed by &lt;a href=&#34;https://amundsen.com&#34;&gt;Mike
Amundsen&lt;/a&gt;. You can find detailed examples, the full spec
and sample code &lt;a href=&#34;https://amundsen.com/media-types/collection/&#34;&gt;on his website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;SIREN&lt;/h2&gt;

&lt;p&gt;The last media type we&amp;rsquo;ll look at is
&lt;a href=&#34;https://github.com/kevinswiber/siren&#34;&gt;SIREN&lt;/a&gt;. SIREN aims to represent generic
entities along with actions for modifying those entities and links for client
navigation.&lt;/p&gt;

&lt;h3 id=&#34;toc_13&#34;&gt;Entities&lt;/h3&gt;

&lt;p&gt;Each SIREN entity may have an optional class that describes the nature of the
entity. This class defines the type of resource being returned by the API.
Think of this as a data model for your API. By defining our response as
returning a &lt;code&gt;player&lt;/code&gt; class the API user can immediately gain insight about the
data being returned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;class&amp;quot;: &amp;quot;player&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_14&#34;&gt;Properties&lt;/h3&gt;

&lt;p&gt;The state of the entity is reflected as key-value pairs in a &lt;code&gt;properties&lt;/code&gt; object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;class&amp;quot;: &amp;quot;player&amp;quot;,
    &amp;quot;properties&amp;quot;: {
        &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
        &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
        &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_15&#34;&gt;Links&lt;/h3&gt;

&lt;p&gt;Links are used in the same sense we&amp;rsquo;ve already seen in other media types &amp;ndash;
navigating to related resources. With SIREN links have a relation and a URL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;class&amp;quot;: &amp;quot;player&amp;quot;,
    &amp;quot;links&amp;quot;: [
        { &amp;quot;rel&amp;quot;: [ &amp;quot;self&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890&amp;quot; },
        { &amp;quot;rel&amp;quot;: [ &amp;quot;friends&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot; }
    ],
    &amp;quot;properties&amp;quot;: {
        &amp;quot;playerId&amp;quot;: &amp;quot;1234567890&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;Kevin Sookocheff&amp;quot;,
        &amp;quot;alternateName&amp;quot;: &amp;quot;soofaloofa&amp;quot;,
        &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/avatar.png&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_16&#34;&gt;Actions&lt;/h3&gt;

&lt;p&gt;One of the biggest pieces missing from common Hypermedia types is the ability to
dictate what requests can be made to alter the application state. SIREN
facilitates this by defining &lt;code&gt;actions&lt;/code&gt; that a client can take on the given
resource.&lt;/p&gt;

&lt;p&gt;SIREN actions show the available HTTP request method and includes the URL for
the request along with fields or variables that the URL accepts. As an example,
our resource for listing a players friends can offer an action to add a
friend to the list, or search for a friend.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;GET https://api.example.com/player/1234567890/friends
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;{
    &amp;quot;class&amp;quot;: &amp;quot;player&amp;quot;,
    &amp;quot;links&amp;quot;: [
        {&amp;quot;rel&amp;quot;: [ &amp;quot;self&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;},
        {&amp;quot;rel&amp;quot;: [ &amp;quot;next&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends?page=2&amp;quot;}
    ],
    &amp;quot;actions&amp;quot;: [{
        &amp;quot;class&amp;quot;: &amp;quot;add-friend&amp;quot;,
        &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1234567890/friends&amp;quot;,
        &amp;quot;method&amp;quot;: &amp;quot;POST&amp;quot;,
        &amp;quot;fields&amp;quot;: [
            {&amp;quot;name&amp;quot;: &amp;quot;name&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;alternateName&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;image&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;href&amp;quot;}
        ]
    }],
    &amp;quot;properties&amp;quot;: {
        &amp;quot;size&amp;quot;: &amp;quot;2&amp;quot;
    },
    &amp;quot;entities&amp;quot;: [
        { 
            &amp;quot;links&amp;quot;: [ 
                {&amp;quot;rel&amp;quot;: [ &amp;quot;self&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109&amp;quot;},
                {&amp;quot;rel&amp;quot;: [ &amp;quot;friends&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/friends&amp;quot;}
            ],
            &amp;quot;properties&amp;quot;: {
                &amp;quot;playerId&amp;quot;: &amp;quot;1895638109&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Sheldon Dong&amp;quot;,
                &amp;quot;alternateName&amp;quot;: &amp;quot;sdong&amp;quot;,
                &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/1895638109/avatar.png&amp;quot;
            }
        },
        { 
            &amp;quot;links&amp;quot;: [
                {&amp;quot;rel&amp;quot;: [ &amp;quot;self&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509&amp;quot;},
                {&amp;quot;rel&amp;quot;: [ &amp;quot;friends&amp;quot; ], &amp;quot;href&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/friends&amp;quot; }
            ],
            &amp;quot;properties&amp;quot;: {
                &amp;quot;playerId&amp;quot;: &amp;quot;8371023509&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;Martin Liu&amp;quot;,
                &amp;quot;alternateName&amp;quot;: &amp;quot;mliu&amp;quot;,
                &amp;quot;image&amp;quot;: &amp;quot;https://api.example.com/player/8371023509/avatar.png&amp;quot;
            }
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_17&#34;&gt;Entities&lt;/h3&gt;

&lt;p&gt;The previous example also introduces &lt;code&gt;entities&lt;/code&gt; to the response.  Any related
entities that you wish to embed in the current representation are entered as a
list of &lt;code&gt;entities&lt;/code&gt;. Entities are nested. Each entity in this list can have a
class, properties and additional entities.&lt;/p&gt;

&lt;h2 id=&#34;toc_18&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve create a &lt;a href=&#34;https://gist.github.com/soofaloofa/9350847&#34;&gt;Gist&lt;/a&gt; comparing each
of the media types discussed in this post.&lt;/p&gt;

&lt;p&gt;After going through this exercise I&amp;rsquo;ve come to a few conclusions.&lt;/p&gt;

&lt;h3 id=&#34;toc_19&#34;&gt;JSON-LD&lt;/h3&gt;

&lt;p&gt;JSON-LD is great for augmenting existing APIs without introducing
breaking changes. This augmentation mostly serves as a way to self document your
API. If you are looking to add operations to a JSON-LD response look to HYDRA.
HYDRA adds a vocabulary for communicating using the JSON-LD specification. This
is an interesting choice as it decouples the API serialization format from the
communication format.&lt;/p&gt;

&lt;h3 id=&#34;toc_20&#34;&gt;HAL&lt;/h3&gt;

&lt;p&gt;The light weight syntax and semantics of HAL is appealing in a lot of contexts.
HAL is a minimal representation that offers most of the benefits of using a
hypermedia type without adding too much complexity to the implementation. One
area where HAL falters is, like JSON-LD, the lack of support for specifying
actions.&lt;/p&gt;

&lt;h3 id=&#34;toc_21&#34;&gt;Collection+JSON&lt;/h3&gt;

&lt;p&gt;Don&amp;rsquo;t be fooled by the name. Collection+JSON can be used to represent single
items as well and it does this quite well. Of course it shines when representing
data collections. Particularly appealing is the ability to list queries that
your collection supports and templates that clients can use to alter your
collection. For publishing user editable data Collection+JSON shines.&lt;/p&gt;

&lt;h3 id=&#34;toc_22&#34;&gt;SIREN&lt;/h3&gt;

&lt;p&gt;SIREN attempts to represent generic classes of items and overcome the main
drawback of HAL &amp;ndash; support for actions. It does this admirably well and also
introduces the concept of classes to your model bringing a sense of type
information to your API responses.&lt;/p&gt;

&lt;h3 id=&#34;toc_23&#34;&gt;And the winner is?&lt;/h3&gt;

&lt;p&gt;Unfortunately, there is no clear winner. It depends on the contraints in place
on your API. However, I will offer some suggestions.&lt;/p&gt;

&lt;p&gt;If you are augmenting existing API responses choose JSON-LD.
If you are keeping it simple choose HAL.
If you are looking for a full featured media type choose Collection+JSON.&lt;/p&gt;

&lt;p&gt;Did I cover all the bases? Completely miss the mark? Let me know in the
comments!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
