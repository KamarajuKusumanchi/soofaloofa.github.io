<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Kevin Sookocheff]]></title>
        <description><![CDATA[Tinker. Tailor. Soldier. Sailor.]]></description>
        <link>http://sookocheff.com</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Tue, 11 Mar 2014 15:35:49 GMT</lastBuildDate>
        <atom:link href="http://sookocheff.com/rss.xml" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Kevin Sookocheff]]></author>
        <pubDate>Tue, 11 Mar 2014 15:35:15 GMT</pubDate>
        <item>
            <title><![CDATA[On choosing a hypermedia type for your API - HAL, JSON-LD, Collection+JSON, SIREN, Oh My!]]></title>
            <description><![CDATA[<p>In recent years REST has been at the forefront of modern API 
design. This has led to APIs with manageable URLs that respect the HTTP verbs
(GET, POST, PUT <a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html">and the
 rest</a>), producing an
intuitive model for client developers. Unfortunately, there are two problems
that REST doesn&#39;t solve alone.</p>
<p>The first problem is standardized responses. Most every enterprise has defined
their own custom API format, usually a JSON response that maps neatly to their
own data model. A Facebook API client cannot communicate with a Twitter API and
vice versa. This leads to a proliferation of API clients that do almost -- but
not quite -- the same thing. Duplication of effort abounds.</p>
<p>The second problem is linking. As the <a href="https://www.w3.org/TR/json-ld/#basic-concepts">W3C puts it</a>:</p>
<blockquote>
<p>JSON has no built-in support for hyperlinks, which are a fundamental building
block on the Web. </p>
</blockquote>
<p>The drawback of this is that two API endpoints are only linked together by API
documentation. As a user you are forced to scour through walls of API
documentation to understand the relationships between API endpoints and grasp
exactly what actions you can and cannot take against a given resource.</p>
<p>To solve these problems we can look at how we structure our API responses. By
using <em>hypermedia</em> in our responses we can offer links between API endpoints and
documentation, potential actions, and related endpoints. This allows for
<em>discoverable</em> APIs where it is clear from the API response the set of next
actions that a client may want to take. Furthermore, by <em>standardizing</em> on a
hypermedia type clients developed for one API can understand the format of
another API and communicate with minimal duplicated effort.</p>
<p>In this post I will evaluate a few mature hypermedia types for APIs,
offering a side-by-side comparison of their strengths and weaknesses. If you
are impatient for the final result you can <a href="https://gist.github.com/soofaloofa/9350847">jump straight to the code</a>. </p>
<h3 id="the-model">The Model</h3>
<p>To drive this discussion let&#39;s use a hypothetical API for managing a <code>Player</code>
resource derived from the <a href="https://developer.apple.com/library/ios/documentation/GameKit/Reference/GKPlayer_Ref/Reference/Reference.html#//apple_ref/occ/cl/GKPlayer"><code>GKPlayer</code>
class</a>
used by Apple&#39;s GameCenter API. The <code>Player</code> resource can be expressed with this
simple diagram.</p>
<p><img src="/img/2014-02-06-on-choosing-a-hypermedia-format/player-model.png" alt="PlayerResource" title="Player Resource"></p>
<p>Representing this as a typical JSON response would yield something like the
following.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"1234567890"</span></span>,
    "<span class="hljs-attribute">alias</span>": <span class="hljs-value"><span class="hljs-string">"soofaloofa"</span></span>,
    "<span class="hljs-attribute">displayName</span>": <span class="hljs-value"><span class="hljs-string">"Kevin Sookocheff"</span></span>,
    "<span class="hljs-attribute">profilePhotoUrl</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/avatar.png"</span>
</span>}
</code></pre>
<p>And the list of this player&#39;s friends could be retrieved with a separate API call.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>/friends
</code></pre>
<pre class="highlight"><code class="hljs json">[
{
    "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"1895638109"</span></span>,
    "<span class="hljs-attribute">alias</span>": <span class="hljs-value"><span class="hljs-string">"sdong"</span></span>,
    "<span class="hljs-attribute">displayName</span>": <span class="hljs-value"><span class="hljs-string">"Sheldon Dong"</span></span>,
    "<span class="hljs-attribute">profilePhotoUrl</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1895638109/avatar.png"</span>
</span>},
{
    "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"8371023509"</span></span>,
    "<span class="hljs-attribute">alias</span>": <span class="hljs-value"><span class="hljs-string">"mliu"</span></span>,
    "<span class="hljs-attribute">displayName</span>": <span class="hljs-value"><span class="hljs-string">"Martin Liu"</span></span>,
    "<span class="hljs-attribute">profilePhotoUrl</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/8371023509/avatar.png"</span>
</span>}
]
</code></pre>
<p>Let&#39;s take a look at how this API can be represented using hypermedia types.</p>
<h3 id="json-ld">JSON-LD</h3>
<p>We&#39;ll start by looking at JSON for Linked Documents (JSON-LD). JSON-LD is a well
supported media type endorsed by the <a href="https://www.w3.org">World Wide Web
Consortium</a>.</p>
<p>The selling point of JSON-LD is that you can adopt the standard without
introducing breaking changes to your API. The syntax is designed to not disturb
already deployed systems and to provide a smooth migration path from JSON to
JSON with added semantics. </p>
<p>JSON-LD introduces keywords that augment an existing response with additional
information. The most important augmentation is the <em>context</em>. A context in
JSON-LD defines a set of terms that are scoped and valid within the
representation being discussed. A context is assigned to a JSON response using
the <code>@context</code> keyword.</p>
<pre class="highlight"><code class="hljs json">{
  "<span class="hljs-attribute">@context</span>": <span class="hljs-value">{}
</span>}
</code></pre>
<p>Within the context properties are assigned to a URL that provides documentation
about the meaning of that property.</p>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">@context</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">displayName</span>": <span class="hljs-value"><span class="hljs-string">"https://schema.org/name"</span>
    </span>}</span>,
    "<span class="hljs-attribute">displayName</span>": <span class="hljs-value"><span class="hljs-string">"Kevin Sookocheff"</span>
</span>}
</code></pre>
<p>It&#39;s a good idea to use standard naming for our APIs so we can go ahead and
rename <code>displayName</code> to <code>name</code>.</p>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">@context</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"https://schema.org/name"</span>
    </span>}</span>,
    "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Kevin Sookocheff"</span>
</span>}
</code></pre>
<p>At this point we have an unambiguous definition of what the property <code>name</code>
means within the API response by visiting <code>https://schema.org/name</code> to read the
semantics of this property. We can go further and add context to the rest of the
properties. To be consistent with existent naming we will change
<code>profilePhotoUrl</code> to <code>image</code> and <code>alias</code> to <code>alternateName</code>.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">@context</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"https://schema.org/name"</span></span>,
        "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"https://schema.org/alternateName"</span></span>,
        "<span class="hljs-attribute">image</span>": <span class="hljs-value">{
            "<span class="hljs-attribute">@id</span>": <span class="hljs-value"><span class="hljs-string">"https://schema.org/image"</span></span>,
            "<span class="hljs-attribute">@type</span>": <span class="hljs-value"><span class="hljs-string">"@id"</span>
        </span>}
    </span>}</span>,
    "<span class="hljs-attribute">@id</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890"</span></span>,
    "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"1234567890"</span></span>,
    "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Kevin Sookocheff"</span></span>,
    "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"soofaloofa"</span></span>,
    "<span class="hljs-attribute">image</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/avatar.png"</span>
</span>}
</code></pre>
<p>In this example we&#39;ve added the <code>@id</code> annotation. <code>@id</code> signifies <em>identifiers</em>.
Identifiers allow unique external references to any resource, providing similar
semantcis to URLs. In JSON-LD terminology every distinct resource is a node in
the JSON-LD graph. These distinct nodes should have identifiers that can be used
to retrieve a representation of that node. </p>
<p>The last element from our model that is missing from our JSON-LD response is the
list of friends. With JSON-LD unordered lists can be specified using simple
array notation.  In this example we will represent friends by the identifiers
that point to their resources. An HTTP GET request to those URLs would return
the full representation of each friend.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">@context</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"https://schema.org/name"</span></span>,
        "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"https://schema.org/alternateName"</span></span>,
        "<span class="hljs-attribute">image</span>": <span class="hljs-value">{
            "<span class="hljs-attribute">@id</span>": <span class="hljs-value"><span class="hljs-string">"https://schema.org/image"</span></span>,
            "<span class="hljs-attribute">@type</span>": <span class="hljs-value"><span class="hljs-string">"@id"</span>
        </span>}</span>,
        "<span class="hljs-attribute">friends</span>": <span class="hljs-value">{
            "<span class="hljs-attribute">@container</span>": <span class="hljs-value"><span class="hljs-string">"@set"</span>
         </span>}
    </span>}</span>,
    "<span class="hljs-attribute">@id</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890"</span></span>,
    "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"1234567890"</span></span>,
    "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Kevin Sookocheff"</span></span>,
    "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"soofaloofa"</span></span>,
    "<span class="hljs-attribute">image</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/avatar.png"</span></span>,
    "<span class="hljs-attribute">friends</span>": <span class="hljs-value">[ 
        {
            "<span class="hljs-attribute">@id</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1895638109"</span>
        </span>},
        {
            "<span class="hljs-attribute">@id</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/8371023509"</span>
        </span>}
    ]
</span>}
</code></pre>
<p>This gives us the representation of our <code>Player</code> resource in JSON-LD. This
example doesn&#39;t cover all of JSON-LD but should give you a flavour of how the
format can be used. If you want to dive fully into JSON-LD you can always read
the <a href="https://www.w3.org/TR/json-ld/">specification</a>.</p>
<h3 id="hal">HAL</h3>
<p>HAL is a lightweight media type that uses the idea of <em>Resources</em> and <em>Links</em> to
model your JSON responses. <em>Resources</em> can contain <em>State</em> defined by key-value
pairs of data, <em>Links</em> leading to additional resources and <em>Embedded Resources</em>
which are children of the current resource embedded in the representation for
convenience.</p>
<p>HAL is simple to use and easy to understand. These virtues have lead HAL to
become one of the leading hypermedia types in modern APIs.</p>
<h4 id="state">State</h4>
<p>State is the traditional JSON key-value pairs defining the current state of the
resource.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"1234567890"</span></span>,
    "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Kevin Sookocheff"</span></span>,
    "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"soofaloofa"</span></span>,
    "<span class="hljs-attribute">image</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/avatar.png"</span>
</span>}
</code></pre>
<h4 id="links">Links</h4>
<p>Links in HAL are identified as a JSON object named <code>_links</code>. Keys within
<code>_links</code> are the name of the link and should describe the relationship between
the current resource and the link. At a minimum the <code>_links</code> property should
contain a <code>self</code> entry pointing to the current resource.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">_links</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">self</span>": <span class="hljs-value">{ "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890"</span> </span>}
    </span>}</span>,
    "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"1234567890"</span></span>,
    "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Kevin Sookocheff"</span></span>,
    "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"soofaloofa"</span></span>,
    "<span class="hljs-attribute">image</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/avatar.png"</span>
</span>}
</code></pre>
<p>We can easily add a link to the <code>Friends</code> resource which can be used to retrieve
the full list.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>
</code></pre>
<pre class="highlight"><code class="hljs json">{

    "<span class="hljs-attribute">_links</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">self</span>": <span class="hljs-value">{ "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890"</span> </span>}</span>,
        "<span class="hljs-attribute">friends</span>": <span class="hljs-value">{ "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends"</span> </span>}
    </span>}</span>,
    "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"1234567890"</span></span>,
    "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Kevin Sookocheff"</span></span>,
    "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"soofaloofa"</span></span>,
    "<span class="hljs-attribute">image</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/avatar.png"</span>
</span>}
</code></pre>
<h4 id="embedded-resources">Embedded Resources</h4>
<p>Making a GET request to the <code>Friends</code> link would return a full list of
<code>Player</code> resources. Each <code>Player</code> returned is embedded in the representation
as an <em>Embedded Resource</em>. <em>Embedded Resources</em> augment the current resource
state with additional, related resources. These resources are provided as a
convenience to the client application and can be easily used to represent a
list of items.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>/friends
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">_links</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">self</span>": <span class="hljs-value">{ "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends"</span> </span>}</span>,
        "<span class="hljs-attribute">next</span>": <span class="hljs-value">{ "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends?page=2"</span> </span>}
    </span>}</span>,
    "<span class="hljs-attribute">size</span>": <span class="hljs-value"><span class="hljs-string">"2"</span></span>,
    "<span class="hljs-attribute">_embedded</span>": <span class="hljs-value">{ 
        "<span class="hljs-attribute">player</span>": <span class="hljs-value">[
            { 
                "<span class="hljs-attribute">_links</span>": <span class="hljs-value">{ 
                    "<span class="hljs-attribute">self</span>": <span class="hljs-value">{ "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1895638109"</span> </span>}</span>,
                    "<span class="hljs-attribute">friends</span>": <span class="hljs-value">{ "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1895638109/friends"</span> </span>}
                </span>}</span>,
                "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"1895638109"</span></span>,
                "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Sheldon Dong"</span></span>,
                "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"sdong"</span></span>,
                "<span class="hljs-attribute">image</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1895638109/avatar.png"</span>
            </span>},
            { 
                "<span class="hljs-attribute">_links</span>": <span class="hljs-value">{ 
                    "<span class="hljs-attribute">self</span>": <span class="hljs-value">{ "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/8371023509"</span> </span>}</span>,
                    "<span class="hljs-attribute">friends</span>": <span class="hljs-value">{ "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/8371023509/friends"</span> </span>}
                </span>}</span>,
                "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"8371023509"</span></span>,
                "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Martin Liu"</span></span>,
                "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"mliu"</span></span>,
                "<span class="hljs-attribute">image</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/8371023509/avatar.png"</span>
            </span>}
        ]
    </span>}
</span>}
</code></pre>
<p>In this response we&#39;ve added a <code>next</code> link to represent a paged collection and
provide a reference to get the next set of friends in the list. The embedded
resources are a list contained within the <code>player</code> property. </p>
<h4 id="curies">Curies</h4>
<p>An important point about HAL is that each link relation points to a URL with
documentation about that relation. This makes the API discoverable by always
providing documentation about the links available from the current resource. In
the next example a URL for <code>friends</code> points to documentation about that resource.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">_links</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">self</span>": <span class="hljs-value">{ "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890"</span> </span>}</span>,
        "<span class="hljs-attribute">https://api.example.com/docs/rels/friends</span>": <span class="hljs-value">{ "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends"</span> </span>}
    </span>}</span>,
    "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"1234567890"</span></span>,
    "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Kevin Sookocheff"</span></span>,
    "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"soofaloofa"</span></span>,
    "<span class="hljs-attribute">image</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/avatar.png"</span>
</span>}
</code></pre>
<p>Since URLs are long and unwieldy, HAL provides <code>curies</code>. <code>Curies</code> are a reserved
link relation acting as a base URL that is expanded upon by each term. In this
example we will define a <code>curie</code> <code>ex</code> that references the <code>URI</code> 
<code>https://api.example.com/docs/rels/{rel}</code>. <code>Curies</code> are expanded by postfixing
the curie name with a <code>:</code> followed by the name of the resource.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">_links</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">self</span>": <span class="hljs-value">{ "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890"</span> </span>}</span>,
        "<span class="hljs-attribute">curies</span>": <span class="hljs-value">[{ "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"ex"</span></span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/docs/rels/{rel}"</span></span>, "<span class="hljs-attribute">templated</span>": <span class="hljs-value"><span class="hljs-literal">true</span> </span>}]</span>,
        "<span class="hljs-attribute">ex:friends</span>": <span class="hljs-value">{ "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends"</span> </span>}
    </span>}</span>,
    "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"1234567890"</span></span>,
    "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Kevin Sookocheff"</span></span>,
    "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"soofaloofa"</span></span>,
    "<span class="hljs-attribute">image</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/avatar.png"</span>
</span>}
</code></pre>
<p>HAL&#39;s lightweight syntax and model make it a popular choice for API developers
and users. For more information on HAL you can refer to the draft standard that
has been submitted to the <a href="https://tools.ietf.org/html/draft-kelly-json-hal-06">Network Working
Group</a>. </p>
<h3 id="collection-json">Collection+JSON</h3>
<p>The Collection+JSON standard is a media type that standardizes the reading,
writing and querying of items in a collection. Although geared to handling
collections, by representing a single item as a collection of one element,
Collection+JSON can elegantly handle most API responses.</p>
<p>At a minimum a Collection+JSON response must contain a <code>collection</code> object with
a <code>version</code> and a URI pointing to itself.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">collection</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"1.0"</span></span>,
        "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890"</span>
    </span>}
</span>}
</code></pre>
<h4 id="returning-data">Returning Data</h4>
<p>Typically, the response would include a list of items in the collection. For a
single resource, this collection would be a list of a single element. The
properties of each element are given by explicit name/value pairs within a
<code>data</code> attribute as in the following example.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">collection</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"1.0"</span></span>,
        "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player"</span></span>,
        "<span class="hljs-attribute">items</span>": <span class="hljs-value">[
            {
                "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890"</span></span>,
                "<span class="hljs-attribute">data</span>": <span class="hljs-value">[
                      { "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"playerId"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"1234567890"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Identifier"</span> </span>},
                      { "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"name"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"Kevin Sookocheff"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Full Name"</span> </span>},
                      { "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"alternateName"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"soofaloofa"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Alias"</span> </span>}
                ]
            </span>}
        ]
    </span>}
</span>}
</code></pre>
<h4 id="links">Links</h4>
<p>Links can be a property of the collection or of individual items in the
collection. Links may may also include a <code>name</code> and a <code>prompt</code> which can be
useful when creating HTML forms to reference the collection or item.</p>
<p>In this example we will add links for the <code>Players</code> avatar and friends.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">collection</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"1.0"</span></span>,
        "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player"</span></span>,
        "<span class="hljs-attribute">items</span>": <span class="hljs-value">[
            {
                "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890"</span></span>,
                "<span class="hljs-attribute">data</span>": <span class="hljs-value">[
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"playerId"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"1234567890"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Identifier"</span></span>},
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"name"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"Kevin Sookocheff"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Full Name"</span></span>},
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"alternateName"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"soofaloofa"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Alias"</span></span>}
                ]</span>,
                "<span class="hljs-attribute">links</span>": <span class="hljs-value">[
                    {"<span class="hljs-attribute">rel</span>": <span class="hljs-value"><span class="hljs-string">"image"</span></span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/avatar.png"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Avatar"</span></span>, "<span class="hljs-attribute">render</span>": <span class="hljs-value"><span class="hljs-string">"image"</span> </span>},
                    {"<span class="hljs-attribute">rel</span>": <span class="hljs-value"><span class="hljs-string">"friends"</span></span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Friends"</span> </span>}
                ]
            </span>}
        ]
    </span>}
</span>}
</code></pre>
<h4 id="templates">Templates</h4>
<p>As the name would imply, Collection+JSON is uniquely suited to handling
collections. Templates are one aspect of this. A template is an object that
represents an item in the collection. The client can then fill in this template
and POST it to the collection to add an element, or PUT it to update an existing
item.</p>
<p>In this example we define a template for adding to the user&#39;s list of friends.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>/friends
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">collection</span>":
    <span class="hljs-value">{
        "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"1.0"</span></span>,
        "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends"</span></span>,
        "<span class="hljs-attribute">links</span>": <span class="hljs-value">[
            {"<span class="hljs-attribute">rel</span>": <span class="hljs-value"><span class="hljs-string">"next"</span></span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends?page=2"</span></span>}
        ]</span>,
        "<span class="hljs-attribute">items</span>": <span class="hljs-value">[
            {
                "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1895638109"</span></span>,
                "<span class="hljs-attribute">data</span>": <span class="hljs-value">[
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"playerId"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"1895638109"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Identifier"</span></span>},
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"name"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"Sheldon Dong"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Full Name"</span></span>},
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"alternateName"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"sdong"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Alias"</span></span>}
                ]</span>,
                "<span class="hljs-attribute">links</span>": <span class="hljs-value">[
                    {"<span class="hljs-attribute">rel</span>": <span class="hljs-value"><span class="hljs-string">"image"</span></span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1895638109/avatar.png"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Avatar"</span></span>, "<span class="hljs-attribute">render</span>": <span class="hljs-value"><span class="hljs-string">"image"</span> </span>},
                    {"<span class="hljs-attribute">rel</span>": <span class="hljs-value"><span class="hljs-string">"friends"</span></span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1895638109/friends"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Friends"</span> </span>}
                ]
            </span>},
            {
                "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/8371023509"</span></span>,
                "<span class="hljs-attribute">data</span>": <span class="hljs-value">[
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"playerId"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"8371023509"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Identifier"</span></span>},
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"name"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"Martin Liu"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Full Name"</span></span>},
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"alternateName"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"mliu"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Alias"</span></span>}
                ]</span>,
                "<span class="hljs-attribute">links</span>": <span class="hljs-value">[
                    {"<span class="hljs-attribute">rel</span>": <span class="hljs-value"><span class="hljs-string">"image"</span></span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/8371023509/avatar.png"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Avatar"</span></span>, "<span class="hljs-attribute">render</span>": <span class="hljs-value"><span class="hljs-string">"image"</span> </span>},
                    {"<span class="hljs-attribute">rel</span>": <span class="hljs-value"><span class="hljs-string">"friends"</span></span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/8371023509/friends"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Friends"</span> </span>}
                ]
            </span>}
        ]</span>,
        "<span class="hljs-attribute">template</span>": <span class="hljs-value">{
            "<span class="hljs-attribute">data</span>": <span class="hljs-value">[
                {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"playerId"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">""</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Identifier"</span></span>},
                {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"name"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">""</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Full Name"</span></span>},
                {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"alternateName"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">""</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Alias"</span></span>},
                {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"image"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">""</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Avatar"</span></span>}
            ]
        </span>}

    </span>}
</span>}
</code></pre>
<p>To add a friend to this collection you would POST the data specified by the
template to the <code>href</code> link defined by the collection
(<code>https://api.example.com/player/1234567890/friends</code>).</p>
<h4 id="queries">Queries</h4>
<p>The final piece of Collecion+JSON is the <code>queries</code> property. Queries, as the
name implies, define the queries that are supported by this collection. Here the
<code>data</code> object specifies the query parameters supported by the server.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>/friends
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">collection</span>":
    <span class="hljs-value">{
        "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"1.0"</span></span>,
        "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends"</span></span>,
        "<span class="hljs-attribute">links</span>": <span class="hljs-value">[
            {"<span class="hljs-attribute">rel</span>": <span class="hljs-value"><span class="hljs-string">"next"</span></span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends?page=2"</span></span>}
        ]</span>,
        "<span class="hljs-attribute">items</span>": <span class="hljs-value">[
            {
                "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1895638109"</span></span>,
                "<span class="hljs-attribute">data</span>": <span class="hljs-value">[
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"playerId"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"1895638109"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Identifier"</span></span>},
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"name"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"Sheldon Dong"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Full Name"</span></span>},
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"alternateName"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"sdong"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Alias"</span></span>}
                ]</span>,
                "<span class="hljs-attribute">links</span>": <span class="hljs-value">[
                    {"<span class="hljs-attribute">rel</span>": <span class="hljs-value"><span class="hljs-string">"image"</span></span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1895638109/avatar.png"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Avatar"</span></span>, "<span class="hljs-attribute">render</span>": <span class="hljs-value"><span class="hljs-string">"image"</span> </span>},
                    {"<span class="hljs-attribute">rel</span>": <span class="hljs-value"><span class="hljs-string">"friends"</span></span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1895638109/friends"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Friends"</span> </span>}
                ]
            </span>},
            {
                "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/8371023509"</span></span>,
                "<span class="hljs-attribute">data</span>": <span class="hljs-value">[
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"playerId"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"8371023509"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Identifier"</span></span>},
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"name"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"Martin Liu"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Full Name"</span></span>},
                      {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"alternateName"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">"mliu"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Alias"</span></span>}
                ]</span>,
                "<span class="hljs-attribute">links</span>": <span class="hljs-value">[
                    {"<span class="hljs-attribute">rel</span>": <span class="hljs-value"><span class="hljs-string">"image"</span></span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/8371023509/avatar.png"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Avatar"</span></span>, "<span class="hljs-attribute">render</span>": <span class="hljs-value"><span class="hljs-string">"image"</span> </span>},
                    {"<span class="hljs-attribute">rel</span>": <span class="hljs-value"><span class="hljs-string">"friends"</span></span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/8371023509/friends"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Friends"</span> </span>}
                ]
            </span>}
        ]</span>,
        "<span class="hljs-attribute">queries</span>": <span class="hljs-value">[
            {
                "<span class="hljs-attribute">rel</span>": <span class="hljs-value"><span class="hljs-string">"search"</span></span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends/search"</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Search"</span></span>,
                "<span class="hljs-attribute">data</span>": <span class="hljs-value">[
                    {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"search"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">""</span></span>}
                ]
            </span>}
        ]</span>,
        "<span class="hljs-attribute">template</span>": <span class="hljs-value">{
            "<span class="hljs-attribute">data</span>": <span class="hljs-value">[
                {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"playerId"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">""</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Identifier"</span> </span>},
                {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"name"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">""</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Full Name"</span></span>},
                {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"alternateName"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">""</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Alias"</span></span>},
                {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"image"</span></span>, "<span class="hljs-attribute">value</span>": <span class="hljs-value"><span class="hljs-string">""</span></span>, "<span class="hljs-attribute">prompt</span>": <span class="hljs-value"><span class="hljs-string">"Avatar"</span></span>}
            ]
        </span>}
    </span>}
</span>}
</code></pre>
<p>By defining the template and queries within the response Collection+JSON makes
navigation by a new API user relatively simple without needing to understand the
full meaning of the API. It also provides a level of interoperability between
APIs using the Collection+JSON media type. Collection+JSON was designed by <a href="https://amundsen.com">Mike
Amundsen</a>. You can find detailed examples, the full spec
and sample code <a href="https://amundsen.com/media-types/collection/">on his website</a>.</p>
<h3 id="siren">SIREN</h3>
<p>The last media type we&#39;ll look at is
<a href="https://github.com/kevinswiber/siren">SIREN</a>. SIREN aims to represent generic
entities along with actions for modifying those entities and links for client
navigation.</p>
<h4 id="entities">Entities</h4>
<p>Each SIREN entity may have an optional class that describes the nature of the
entity. This class defines the type of resource being returned by the API.
Think of this as a data model for your API. By defining our response as
returning a <code>player</code> class the API user can immediately gain insight about the
data being returned.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">class</span>": <span class="hljs-value"><span class="hljs-string">"player"</span>
</span>}
</code></pre>
<h4 id="properties">Properties</h4>
<p>The state of the entity is reflected as key-value pairs in a <code>properties</code> object.</p>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">class</span>": <span class="hljs-value"><span class="hljs-string">"player"</span></span>,
    "<span class="hljs-attribute">properties</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"1234567890"</span></span>,
        "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Kevin Sookocheff"</span></span>,
        "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"soofaloofa"</span></span>,
        "<span class="hljs-attribute">image</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/avatar.png"</span>
    </span>}
</span>}
</code></pre><h4 id="links">Links</h4>
<p>Links are used in the same sense we&#39;ve already seen in other media types --
navigating to related resources. With SIREN links have a relation and a URL.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">class</span>": <span class="hljs-value"><span class="hljs-string">"player"</span></span>,
    "<span class="hljs-attribute">links</span>": <span class="hljs-value">[
        { "<span class="hljs-attribute">rel</span>": <span class="hljs-value">[ <span class="hljs-string">"self"</span> ]</span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890"</span> </span>},
        { "<span class="hljs-attribute">rel</span>": <span class="hljs-value">[ <span class="hljs-string">"friends"</span> ]</span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends"</span> </span>}
    ]</span>,
    "<span class="hljs-attribute">properties</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"1234567890"</span></span>,
        "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Kevin Sookocheff"</span></span>,
        "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"soofaloofa"</span></span>,
        "<span class="hljs-attribute">image</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/avatar.png"</span>
    </span>}
</span>}
</code></pre>
<h4 id="actions">Actions</h4>
<p>One of the biggest pieces missing from common Hypermedia types is the ability to
dictate what requests can be made to alter the application state. SIREN
facilitates this by defining <code>actions</code> that a client can take on the given
resource.</p>
<p>SIREN actions show the available HTTP request method and includes the URL for
the request along with fields or variables that the URL accepts. As an example,
our resource for listing a players friends can offer an action to add a
friend to the list, or search for a friend.</p>
<pre class="highlight"><code class="hljs bash">GET https://api.example.com/player/<span class="hljs-number">1234567890</span>/friends
</code></pre>
<pre class="highlight"><code class="hljs json">{
    "<span class="hljs-attribute">class</span>": <span class="hljs-value"><span class="hljs-string">"player"</span></span>,
    "<span class="hljs-attribute">links</span>": <span class="hljs-value">[
        {"<span class="hljs-attribute">rel</span>": <span class="hljs-value">[ <span class="hljs-string">"self"</span> ]</span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends"</span></span>},
        {"<span class="hljs-attribute">rel</span>": <span class="hljs-value">[ <span class="hljs-string">"next"</span> ]</span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends?page=2"</span></span>}
    ]</span>,
    "<span class="hljs-attribute">actions</span>": <span class="hljs-value">[{
        "<span class="hljs-attribute">class</span>": <span class="hljs-value"><span class="hljs-string">"add-friend"</span></span>,
        "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1234567890/friends"</span></span>,
        "<span class="hljs-attribute">method</span>": <span class="hljs-value"><span class="hljs-string">"POST"</span></span>,
        "<span class="hljs-attribute">fields</span>": <span class="hljs-value">[
            {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"name"</span></span>, "<span class="hljs-attribute">type</span>": <span class="hljs-value"><span class="hljs-string">"string"</span></span>},
            {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"alternateName"</span></span>, "<span class="hljs-attribute">type</span>": <span class="hljs-value"><span class="hljs-string">"string"</span></span>},
            {"<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"image"</span></span>, "<span class="hljs-attribute">type</span>": <span class="hljs-value"><span class="hljs-string">"href"</span></span>}
        ]
    </span>}]</span>,
    "<span class="hljs-attribute">properties</span>": <span class="hljs-value">{
        "<span class="hljs-attribute">size</span>": <span class="hljs-value"><span class="hljs-string">"2"</span>
    </span>}</span>,
    "<span class="hljs-attribute">entities</span>": <span class="hljs-value">[
        { 
            "<span class="hljs-attribute">links</span>": <span class="hljs-value">[ 
                {"<span class="hljs-attribute">rel</span>": <span class="hljs-value">[ <span class="hljs-string">"self"</span> ]</span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1895638109"</span></span>},
                {"<span class="hljs-attribute">rel</span>": <span class="hljs-value">[ <span class="hljs-string">"friends"</span> ]</span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1895638109/friends"</span></span>}
            ]</span>,
            "<span class="hljs-attribute">properties</span>": <span class="hljs-value">{
                "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"1895638109"</span></span>,
                "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Sheldon Dong"</span></span>,
                "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"sdong"</span></span>,
                "<span class="hljs-attribute">image</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/1895638109/avatar.png"</span>
            </span>}
        </span>},
        { 
            "<span class="hljs-attribute">links</span>": <span class="hljs-value">[
                {"<span class="hljs-attribute">rel</span>": <span class="hljs-value">[ <span class="hljs-string">"self"</span> ]</span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/8371023509"</span></span>},
                {"<span class="hljs-attribute">rel</span>": <span class="hljs-value">[ <span class="hljs-string">"friends"</span> ]</span>, "<span class="hljs-attribute">href</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/8371023509/friends"</span> </span>}
            ]</span>,
            "<span class="hljs-attribute">properties</span>": <span class="hljs-value">{
                "<span class="hljs-attribute">playerId</span>": <span class="hljs-value"><span class="hljs-string">"8371023509"</span></span>,
                "<span class="hljs-attribute">name</span>": <span class="hljs-value"><span class="hljs-string">"Martin Liu"</span></span>,
                "<span class="hljs-attribute">alternateName</span>": <span class="hljs-value"><span class="hljs-string">"mliu"</span></span>,
                "<span class="hljs-attribute">image</span>": <span class="hljs-value"><span class="hljs-string">"https://api.example.com/player/8371023509/avatar.png"</span>
            </span>}
        </span>}
    ]
</span>}
</code></pre>
<h4 id="entities">Entities</h4>
<p>The previous example also introduces <code>entities</code> to the response.  Any related
entities that you wish to embed in the current representation are entered as a
list of <code>entities</code>. Entities are nested. Each entity in this list can have a
class, properties and additional entities.</p>
<h3 id="conclusions">Conclusions</h3>
<p>I&#39;ve create a <a href="https://gist.github.com/soofaloofa/9350847">Gist</a> comparing each
of the media types discussed in this post. </p>
<p>After going through this exercise I&#39;ve come to a few conclusions. </p>
<h4 id="json-ld">JSON-LD</h4>
<p>JSON-LD is great for augmenting existing APIs without introducing
breaking changes. This augmentation mostly serves as a way to self document your
API.  Unfortunately, I think the benefits of JSON-LD end there. The media type
is verbose and lacks support for specifying the actions you can take on the
resource (without introducing another complicated standard --
<a href="http://www.markus-lanthaler.com/hydra/">Hydra</a>).</p>
<h4 id="hal">HAL</h4>
<p>The light weight syntax and semantics of HAL is appealing in a lot of contexts.
HAL is a minimal representation that offers most of the benefits of using a
hypermedia type without adding too much complexity to the implementation. One
area where HAL falters is, like JSON-LD, the lack of support for specifying
actions.</p>
<h4 id="collection-json">Collection+JSON</h4>
<p>Don&#39;t be fooled by the name. Collection+JSON can be used to represent single
items as well and it does this quite well. Of course it shines when representing
data collections. Particularly appealing is the ability to list queries that
your collection supports and templates that clients can use to alter your
collection. For publishing user editable data Collection+JSON shines.</p>
<h4 id="siren">SIREN</h4>
<p>SIREN attempts to represent generic classes of items and overcome the main
drawback of HAL -- support for actions. It does this admirably well and also
introduces the concept of classes to your model bringing a sense of type
information to your API responses.</p>
<h4 id="and-the-winner-is-">And the winner is?</h4>
<p>Unfortunately, there is no clear winner. It depends on the contraints in place
on your API. However, I will offer some suggestions.</p>
<p>If you are augmenting existing API responses choose JSON-LD.
If you are keeping it simple choose HAL.
If you are looking for a full featured media type choose Collection+JSON.</p>
<p>Did I cover all the bases? Completely miss the mark? Let me know in the
comments!</p>
]]></description>
            <link>http://sookocheff.com/posts/2014-03-11-on-choosing-a-hypermedia-format</link>
            <guid isPermaLink="true">http://sookocheff.com/posts/2014-03-11-on-choosing-a-hypermedia-format</guid>
            <dc:creator><![CDATA[Kevin Sookocheff]]></dc:creator>
            <pubDate>Tue, 11 Mar 2014 06:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[New Year, New Domain, New Design]]></title>
            <description><![CDATA[<p>Well the New Year is upon us and I decided to take a fresh approach to this website. I&#39;ve migrated to a new domain and re-written the site from the ground up using <a href="http://docpad.org/">DocPad</a> and <a href="http://getbootstrap.com/">Bootstrap</a>.</p>
<p>I&#39;ve migrated the existing comments (and maybe lost a few) but haven&#39;t bothered to redirect any old posts to their new home. I&#39;m definitely starting fresh!</p>
]]></description>
            <link>http://sookocheff.com/posts/2014-01-06-new-year-new-domain-new-design</link>
            <guid isPermaLink="true">http://sookocheff.com/posts/2014-01-06-new-year-new-domain-new-design</guid>
            <dc:creator><![CDATA[Kevin Sookocheff]]></dc:creator>
            <pubDate>Mon, 06 Jan 2014 06:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Three questions that define an ideal customer]]></title>
            <description><![CDATA[<p>One of the first steps in selling a new product or service is finding your target market and one of the best ways of finding your target market is by defining your ideal customer. Ask yourself -- out of all the people in the world who would be the most likely to buy this thing? If you can clearly answer this question you have your ideal customer and you can start a marketing campaign targetting exactly the demographic you are trying to sell to.</p>
<p>Let&#39;s go through an exercise that can help to find that ideal customer by asking three simple questions.</p>
<h3 id="1-what-are-you-selling-">1. What are you selling?</h3>
<p>You need to clearly define what you are selling. This should get very specific and include any different versions or service levels of your product? Are you selling support? Are yo selling security? Think of the pain points of your customer and how what you are selling can alleviate this pain.</p>
<h3 id="2-who-are-you-selling-to-">2. Who are you  selling to?</h3>
<p>Are you selling to consumers or enterprise? Be specific. Is your offering for teachers or principals? Administrators? Try to define the most specific audience you can and then focus your marketing and sales efforts on exactly this audience.</p>
<h3 id="3-what-is-the-price-point-">3. What is the price point?</h3>
<p>The ideal answer to this question should come from your ideal customer. Find and reach out to the person or people you have identified in your first two questions and ask them -- What would you pay for a service like this? If you are marketing online try and include a survey and gather as much data as you can about possible price points.</p>
<h3 id="remember-your-goal">Remember your goal</h3>
<p>Throughout this exercise always remember to focus on your goal. The biggest marketing questions you need to ask are &quot;Who would buy this?&quot; followed by &quot;How do I find them?&quot;. If you can answer these two questions with marketing your sales channel and product will help close the deal.</p>
]]></description>
            <link>http://sookocheff.com/posts/2014-01-04-three-questions-that-define-an-ideal-customer</link>
            <guid isPermaLink="true">http://sookocheff.com/posts/2014-01-04-three-questions-that-define-an-ideal-customer</guid>
            <dc:creator><![CDATA[Kevin Sookocheff]]></dc:creator>
            <pubDate>Sat, 04 Jan 2014 06:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[How to get accepted to a business plan competition]]></title>
            <description><![CDATA[<p>I recently received the good news that my business idea was accepted for the <a href="http://www.usask.ca/research/ilo/business_plan.php">University of Saskatchewan&#39;s 2014 Tech Venture Challenge</a>. The Tech Venture Challenge is a business plan competition for students and alumni where participants are judged by their finished business plan and pitch after a four month workshop program. I&#39;m going to blog about the experience as a way to absorb the material and hopefully help someone else who may be applying in the future. This post will provide some admittedly biased advice on submitting your application to the Tech Venture Challenge. </p>
<h3 id="be-concise">Be concise</h3>
<p>The first criteria for the applications was describing your business idea in 100 words or less. 100 words is not a lot so you need to make sure every word counts. This ideal holds true for all writing (&quot;<a href="https://www.goodreads.com/quotes/952396-not-a-wasted-word-this-has-been-a-main-point">Not a wasted word</a>&quot;). Every word must have purpose and every sentence must lead to your goal -- helping the reader understand exactly what it is you are trying to do. </p>
<h3 id="be-specific">Be specific</h3>
<p>For the technical portion of your application be sure to include concrete and actionable items that can help you achieve your goal. It&#39;s okay here to talk about more specific domain knowledge and use technical terms. You need to show that you have thought deeply about the problem and about how you can best solve it.</p>
<h3 id="be-realistic">Be realistic</h3>
<p>This advice may not apply to all applications and it would vary depending on your idea. In my case I chose a business idea that had a reasonable chance of making forward progress in the next year. At the very least you must provide some evidence that you are at the stage of your business where you are ready to start formalizing your plans and start working towards your goals.</p>
<h3 id="have-someone-proofread-your-work">Have someone proofread your work</h3>
<p>You absolutely <em>need</em> someone outside your immediate circle to proofread your work. Ideally this person would not know anything about your business or even about your problem domain. You must assume that the judges have never heard of your problem and know nothing about your area of expertise. This means you must educate them about what the problem is and how you are going to solve it using plain English. I was lucky enough to have my wife Manon, who has outstanding talent in grant and proposal writing, go over the application with a fine toothed comb. I cannot stress enough how much this helped me convey my idea in an understandable way.</p>
<p>We&#39;ve already had our first workshop session and I&#39;ve learned a ton already. If you want to keep up to date with the competition <a href="http://kevinsookocheff.us3.list-manage2.com/subscribe?u=8b57d632b8677f07ca57dc9cb&amp;id=ec7ddaa3ba">subscribe to this blog</a>. You&#39;ll get new posts delivered right to your inbox!</p>
]]></description>
            <link>http://sookocheff.com/posts/2013-12-19-how-to-get-accepted-to-a-business-plan-competition</link>
            <guid isPermaLink="true">http://sookocheff.com/posts/2013-12-19-how-to-get-accepted-to-a-business-plan-competition</guid>
            <dc:creator><![CDATA[Kevin Sookocheff]]></dc:creator>
            <pubDate>Thu, 19 Dec 2013 06:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Install node.js packages via npm with a Chef Cookbook]]></title>
            <description><![CDATA[<p>I wanted to set up a Vagrant instance with node.js and some specific packages pre-installed. I found a Chef cookbook to install node and after a bit of work have a cookbook that will install arbitrary node packages through npm.  I based this heavily on <a href="https://github.com/balbeko/chef-npm">balbeko</a>&#39;s chef-npm cookbook with modifications to accept a data bag list of npm packages. Any packages in this list will be installed by Chef.</p>
<p>Behold! My first <a href="https://github.com/soofaloofa/chef-npm-package-install">Chef cookbook</a>.</p>
]]></description>
            <link>http://sookocheff.com/posts/2013-06-04-install-npm-packages-with-a-chef-cookbook</link>
            <guid isPermaLink="true">http://sookocheff.com/posts/2013-06-04-install-npm-packages-with-a-chef-cookbook</guid>
            <dc:creator><![CDATA[Kevin Sookocheff]]></dc:creator>
            <pubDate>Thu, 06 Jun 2013 06:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Photos is the Killer Feature of Google+]]></title>
            <description><![CDATA[<p>Yesterday&#39;s <a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=9pmPa_KxsAM">Google I/O keynote</a> unveiled some new features in Music, Maps and Search. But to me the biggest and most important announcement was the new <a href="http://thenextweb.com/google/2013/05/15/googles-new-google-photo-features-15gb-full-size-storage-auto-highlight-auto-enhance-more/">Google+ photo features</a>. Full-size high-resolution photos, automatic highlights of entire albums, automatic enhancement and auto-awesome combine to make Google+ <em>the</em> most feature packed photo hosting service on the web. Add the ability to share pictures with anyone via e-mail (take that Facebook) and Google+ is now <em>the</em> best social network to host and share photos. </p>
<p>Why is this important? It encroaches directly on Facebook&#39;s bread and butter, sharing pictures. Take a look at the <a href="http://expandedramblings.com/index.php/by-the-numbers-17-amazing-facebook-stats/">statistics</a>. As of May 2013 Facebook hosts 240 billion photos and averages roughly 350 million photo uploads per day. This implies (and my limited anecdotal evidence supports) that most Facebook users view the site as a photo sharing service. If Google can gain mindshare as the premiere social network for sharing photos you may see a large defection users from Facebook. </p>
]]></description>
            <link>http://sookocheff.com/posts/2013-05-16-why-photos-is-the-killer-feature-of-google-plus</link>
            <guid isPermaLink="true">http://sookocheff.com/posts/2013-05-16-why-photos-is-the-killer-feature-of-google-plus</guid>
            <dc:creator><![CDATA[Kevin Sookocheff]]></dc:creator>
            <pubDate>Thu, 16 May 2013 06:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Apple has a Software Problem - Why I'll be Switching to Android]]></title>
            <description><![CDATA[<p>No one can question Apple’s dominance in hardware. The build quality and user experience of the iPod, iPhone and iPad positioned Apple as the most profitable company in the world. However, with the build quality of rival devices quickly approaching Apple quality, software will be the next battleground for consumer loyalty. And Apple has a software problem.</p>
<p>The release of <a href="http://googleblog.blogspot.ca/2013/04/google-now-on-your-iphone-and-ipad-with.html">Google Now</a> for iOS has shown that Google’s software engineering and user interface design can combine to release high quality, functional products surpassing those custom-built by Apple on Apple’s own hardware. Cloud-based mobile apps will continue to gain users and Google’s cloud based offerings are on a completely different level than Apples meagre offerings. In my personal experience Apple’s Reminders App constantly goes out of sync between my iPad and iPhone — with only a simple to-do list on two devices! As more and more data is pushed to the cloud Google’s offerings will continue to outpace what Apple’s — Google has solved so many distributed and cloud computing problems and their infrastructure is not easily replicated.</p>
<p>I have completely replaced Safari with Google Search and Google Chrome, Mail with Gmail, Siri with Google Voice Search, and Google Now is a complete product offering with no answer from Apple. These services work even better with deeper integration and for my next phone I’ll be switching over to Android to gain this integration. As Google Plus and the Google identity layer gain more penetration, more and more people will be using Google products. Imagine a new user with a Google account and a few Google services buying a phone. You can buy Android, sign in once and all your data is exactly where you expect. Or you can buy Apple, download 3 apps, configure the rest to work properly with your existing calendar and hope that everything stays in sync. I know what I do.</p>
]]></description>
            <link>http://sookocheff.com/posts/2013-04-30-apple-has-a-software-problem-why-ill-be-switching-to-android</link>
            <guid isPermaLink="true">http://sookocheff.com/posts/2013-04-30-apple-has-a-software-problem-why-ill-be-switching-to-android</guid>
            <dc:creator><![CDATA[Kevin Sookocheff]]></dc:creator>
            <pubDate>Tue, 30 Apr 2013 06:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Creating a new file or directory in Vim using NERDTree]]></title>
            <description><![CDATA[<p>I’m not sure why this was so difficult to discover. For the longest time I was not sure how to create a new file using NERDTree. I finally sat down and figure out how it works.</p>
<p>First, bring up NERDTree and navigate to the directory where you want to create the new file. Press <code>m</code> to bring up the NERDTree Filesystem Menu. This menu allows you to create, rename, and delete files and directories. Type <code>a</code> to add a child node and then simply enter the filename. You’re done! To create a directory follow the same steps but append a <code>/</code> to the filename.</p>
]]></description>
            <link>http://sookocheff.com/posts/2013-04-19-creating-a-new-file-or-directoryin-vim-using-nerdtree</link>
            <guid isPermaLink="true">http://sookocheff.com/posts/2013-04-19-creating-a-new-file-or-directoryin-vim-using-nerdtree</guid>
            <dc:creator><![CDATA[Kevin Sookocheff]]></dc:creator>
            <pubDate>Fri, 19 Apr 2013 06:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Submitting a Unity3d Game to the Mac App Store]]></title>
            <description><![CDATA[<p>Submitting a Unity3d game to the Mac App Store is a somewhat painful process. This guide refers to Unity3d 3.5 but should apply to Unity 4.0 and up.</p>
<h3 id="building">Building</h3>
<p>First, build your application for Mac and make sure that you uncheck Mac App Store Validation in the PlayerSettings Inspector window.</p>
<p><img src="/img/2013-04-09-submitting-a-unity3d-game-to-the-mac-app-store/player-settings.png" alt="PlayerSettings" title="PlayerSettings"></p>
<p>Building your App from Unity will create a .App file. Navigate to this file in Finder and right-click. Choose Show Package Contents from the context menu to open your app as a folder.</p>
<h3 id="info-plist">Info.plist</h3>
<p>Navigate to the Contents directory and open the file Info.plist in your favorite text editor. You will need to make a few changes to this file.</p>
<p><img src="/img/2013-04-09-submitting-a-unity3d-game-to-the-mac-app-store/info-plist.png" alt="Info.plist" title="Info.plist"></p>
<p>Specifically, you will need to edit the following entries to correspond to your specific application.</p>
<pre class="highlight"><code class="hljs xml">CFBundleExecutable: The name of your game.
CFBundleGetInfoString: Human readable information about your game.
CFBundleIdentifier: The App identifier you registered at the Mac App Store.
CFBundleName: The name of your game.
CFBundleShortVersionString: The version number of your game.
NSHumanReadableCopyright: Your copyright.
LSApplicationCategoryType: The category of your application.
</code></pre>
<p>The end result will look something like this:</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">plist</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">dict</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>CFBundleDevelopmentRegion<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>CFBundleExecutable<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>PhantomLeader<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>CFBundleGetInfoString<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>Phantom Leader version 1.0.7<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>CFBundleIconFile<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>icons.icns<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>CFBundleIdentifier<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>com.dvg.phantomleadermac<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>CFBundleInfoDictionaryVersion<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>6.0<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>CFBundleName<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>PhantomLeader<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>CFBundlePackageType<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>APPL<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>CFBundleShortVersionString<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>1.0.7<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>CFBundleSignature<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>????<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>CFBundleVersion<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>1.0.7<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>NSMainNibFile<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>MainMenu<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>NSPrincipalClass<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>PlayerApplication<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>NSHumanReadableCopyright<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>Dan Verssen Games/Red Finch Software<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>LSApplicationCategoryType<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>public.app-category.board-games<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>UnityBuildNumber<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>b81e0151ec83<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">dict</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">plist</span>&gt;</span>
</code></pre><p>You can get more information about these keys from the Apple developer documentation. The most notable key in need of changing is the LSApplicationCategoryType which must correspond to an actual category on the Mac App Store. You can find the LS keys documentation <a href="http://developer.apple.com/library/ios/#documentation/general/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html">here</a>.</p>
<h3 id="icons">Icons</h3>
<p>You will need to generate an iconset matching Apple’s <a href="https://developer.apple.com/library/mac/#documentation/GraphicsAnimation/Conceptual/HighResolutionOSX/Optimizing/Optimizing.html#//apple_ref/doc/uid/TP40012302-CH7-SW2">Human Interface Guidelines</a>. The first step is to create all of the required icons. You will need variations of your icon supporting the following resolutions.</p>
<pre class="highlight"><code class="hljs avrasm">icon_16x16<span class="hljs-preprocessor">.png</span>
icon_16x16<span class="hljs-localvars">@2</span><span class="hljs-built_in">x</span><span class="hljs-preprocessor">.png</span>
icon_32x32<span class="hljs-preprocessor">.png</span>
icon_32x32<span class="hljs-localvars">@2</span><span class="hljs-built_in">x</span><span class="hljs-preprocessor">.png</span>
icon_128x128<span class="hljs-preprocessor">.png</span>
icon_128x128<span class="hljs-localvars">@2</span><span class="hljs-built_in">x</span><span class="hljs-preprocessor">.png</span>
icon_256x256<span class="hljs-preprocessor">.png</span>
icon_256x256<span class="hljs-localvars">@2</span><span class="hljs-built_in">x</span><span class="hljs-preprocessor">.png</span>
icon_512x512<span class="hljs-preprocessor">.png</span>
icon_512x512<span class="hljs-localvars">@2</span><span class="hljs-built_in">x</span><span class="hljs-preprocessor">.png</span>
</code></pre><p>Place all of these icons in the same folder called icons.iconset. Now we have to drop in to Terminal and run the iconutil program to create your icns file which will be named the same as your icons folder. Running</p>
<pre class="highlight"><code class="hljs bash">iconutil -c icns
</code></pre>
<p>will generate a file called icons.icns. You will need to replace the file <code>UnityPlayer.icns</code> with this icon file using Finder. The <code>UnityPlayer.icns</code> file is located in <code>Contents -&gt; Resources</code> within your .App.</p>
<h3 id="entitlements">Entitlements</h3>
<p>All Apps on the Mac App Store must be sandboxed. To sandbox your Unity app you have to provide an entitlements file to use during the code signing process. A fairly minimal entitlements file should look something like this.</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">plist</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">dict</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>com.apple.security.app-sandbox<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">true</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">key</span>&gt;</span>com.apple.security.device.usb<span class="hljs-tag">&lt;/<span class="hljs-title">key</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">true</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">dict</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">plist</span>&gt;</span>
</code></pre><p>You can read more about entitlements at the <a href="http://developer.apple.com/library/mac/#documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/AboutEntitlements.html">Entitlement Key Reference</a>.</p>
<h3 id="code-signing">Code Signing</h3>
<p>Now that we have our iconset and entitlements ready we can codesign our App for delivery to the Mac App Store. We have to drop back to the Terminal to run the codesign application.</p>
<pre class="highlight"><code class="hljs bash">codesign --force --sign <span class="hljs-string">"3rd Party Mac Developer Application: XXXX"</span> --entitlements yourapp.entitlements YourApp.app
</code></pre>
<p>You can find &quot;XXXX&quot; in the Keychain Access program. Look for a code signing certificate beginning with the text &quot;3rd Party Mac Developer Application&quot; you will need to copy this entire text to the codesign command above. You can find more details from the <a href="http://developer.apple.com/library/mac/#releasenotes/General/SubmittingToMacAppStore/index.html">App Store Submission documentation</a>.</p>
<p><img src="/img/2013-04-09-submitting-a-unity3d-game-to-the-mac-app-store/keychain.png" alt="KeyChain Access" title="KeyChain Access"></p>
<p>In addition to signing your app you must sign <code>libmono.dylib</code>.  </p>
<pre class="highlight"><code class="hljs bash">codesign --force --sign <span class="hljs-string">"3rd Party Mac Developer Application: XXXX"</span> --entitlements yourapp.entitlements YourApp.app/Contents/Frameworks/MonoEmbedRuntime/osx/libmono.<span class="hljs-number">0</span>.dylib
</code></pre>
<p>If you don’t have the required Keychain Access certificates you will need to create these using the Apple Member Center.</p>
<h3 id="product-building">Product Building</h3>
<p>To build your final product run productbuild from the command line.</p>
<pre class="highlight"><code class="hljs bash">productbuild --component /YourApp.app /Applications --sign <span class="hljs-string">"3rd Party Mac Developer Installer: XXXX"</span> YourApp.pkg
</code></pre>
<p>Where &quot;XXXX&quot; is again from Keychain Access. This time, use the certificate beginning with  &quot;3rd Party Mac Developer Installer&quot;.</p>
<h3 id="application-loader">Application Loader</h3>
<p>You are finally ready to submit your App! Before submission you must create your App on iTunes Connect and fill out detailed app information. After your app is created launch Application Loader and click on Deliver Your App. Choose the application you created in iTunes Connect from the drop down menu and follow the prompts to choose your .pkg file that was created with the productbuild  command.</p>
<p>Your done! Click submit and, if all went well, you will see your app will be delivered to the App Store and be ready for review.</p>
]]></description>
            <link>http://sookocheff.com/posts/2013-04-09-submitting-a-unity3d-game-to-the-mac-app-store</link>
            <guid isPermaLink="true">http://sookocheff.com/posts/2013-04-09-submitting-a-unity3d-game-to-the-mac-app-store</guid>
            <dc:creator><![CDATA[Kevin Sookocheff]]></dc:creator>
            <pubDate>Tue, 09 Apr 2013 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Development Post-Mortem up now on BoardGameGeek.com]]></title>
            <description><![CDATA[<p>I recently published a full development post-mortem at BoardGameGeek.com. Give it a read and let me know what you think!</p>
<p><a href="http://boardgamegeek.com/blogpost/16843/developer-post-mortem-phantom-leader">Developer Post-Mortem: Phantom Leader for iPad</a>.</p>
]]></description>
            <link>http://sookocheff.com/posts/2013-02-12-development-post-mortem-up-now-on-boardgamegeek-com</link>
            <guid isPermaLink="true">http://sookocheff.com/posts/2013-02-12-development-post-mortem-up-now-on-boardgamegeek-com</guid>
            <dc:creator><![CDATA[Kevin Sookocheff]]></dc:creator>
            <pubDate>Tue, 12 Feb 2013 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>