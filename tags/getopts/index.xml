<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kevin Sookocheff</title>
    <link>http://sookocheff.com/tags/getopts/index.xml/</link>
    <language>en-us</language>
    <copyright>Copyright Kevin Sookocheff.</copyright>
    <lastBuildDate>Sun, 04 Jan 2015 12:31:51 UTC</lastBuildDate>
    
    <item>
      <title>Parsing bash script options with getopts</title>
      <link>http://sookocheff.com/posts/2015-01-04-parsing-bash-script-arguments-with-shopts/</link>
      <pubDate>Sun, 04 Jan 2015 12:31:51 UTC</pubDate>
      <author>kevin.sookocheff@gmail.com (Kevin Sookocheff)</author>
      <guid>http://sookocheff.com/posts/2015-01-04-parsing-bash-script-arguments-with-shopts/</guid>
      <description>

&lt;p&gt;A common task in shell scripting is to parse command line arguments to your
script. Bash provides the &lt;code&gt;getopts&lt;/code&gt; built-in function to do just that. This
tutorial explains how to use the &lt;code&gt;getopts&lt;/code&gt; built-in function to parse arguments and options to a bash script.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;getopts&lt;/code&gt; function takes three parameters. The first is a specification of
which options are valid, listed as a sequence of letters. For example, the
string &lt;code&gt;&#39;ht&#39;&lt;/code&gt; signifies that the options &lt;code&gt;-h&lt;/code&gt; and &lt;code&gt;-t&lt;/code&gt; are valid.&lt;/p&gt;

&lt;p&gt;The second argument to &lt;code&gt;getopts&lt;/code&gt; is a variable that will be populated with the
option or argument to be processed next. In the following loop, &lt;code&gt;opt&lt;/code&gt; will hold
the value of the current option that has been parsed by &lt;code&gt;getopts&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;while getopts &amp;quot;:ht&amp;quot; opt; do
  case ${opt} in
    h ) # process option a
      ;;
    t ) # process option l
      ;;
    \? ) echo &amp;quot;Usage: cmd [-h] [-t]
      ;;
  esac
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example shows a few additional features of &lt;code&gt;getopts&lt;/code&gt;. First, if an invalid
option is provided, the option variable is assigned the value &lt;code&gt;?&lt;/code&gt;. You can catch
this case and provide an appropriate usage message to the user. Second, this
behaviour is only true when you prepend the list of valid options with &lt;code&gt;:&lt;/code&gt; to
disable the default error handling of invalid options. It is recommended to
always disable the default error handling in your scripts.&lt;/p&gt;

&lt;p&gt;The third argument to &lt;code&gt;getopts&lt;/code&gt; is the list of arguments and options to be
processed. When not provided, this defaults to the arguments and options
provided to the application (&lt;code&gt;$@&lt;/code&gt;). You can provide this third argument to use
&lt;code&gt;getopts&lt;/code&gt; to parse any list of arguments and options you provide.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Shifting processed options&lt;/h2&gt;

&lt;p&gt;The variable &lt;code&gt;OPTIND&lt;/code&gt; holds the number of options parsed by the last call to
&lt;code&gt;getopts&lt;/code&gt;. It is common practice to call the &lt;code&gt;shift&lt;/code&gt; command at the end of your
processing loop to remove options that have already been handled from &lt;code&gt;$@&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shift $((OPTIND -1))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Parsing options with arguments&lt;/h2&gt;

&lt;p&gt;Options that themselves have arguments are signified with a &lt;code&gt;:&lt;/code&gt;. The argument to
an option is placed in the variable &lt;code&gt;OPTARG&lt;/code&gt;. In the following example, the
option &lt;code&gt;t&lt;/code&gt; takes an argument. When the argument is provided, we copy its value
to the variable &lt;code&gt;target&lt;/code&gt;. If no argument is provided &lt;code&gt;getopts&lt;/code&gt; will set &lt;code&gt;opt&lt;/code&gt; to
&lt;code&gt;:&lt;/code&gt;. We can recognize this error condition by catching the &lt;code&gt;:&lt;/code&gt; case and printing
an appropriate error message.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;while getopts &amp;quot;:t:&amp;quot; opt; do
  case ${opt} in 
    t )
      target=$OPTARG
      ;;
    \? )
      echo &amp;quot;Invalid option: $OPTARG&amp;quot; 1&amp;gt;&amp;amp;2
      ;;
    : )
      echo &amp;quot;Invalid option: $OPTARG requires an argument&amp;quot; 1&amp;gt;&amp;amp;2
      ;;
  esac
done
shift $((OPTIND -1))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;An extended example &amp;ndash; parsing nested arguments and options&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s walk through an extended example of processing a command that takes
options, has a sub-command, and whose sub-command takes an additional option
that has an argument. This is a mouthful so let&amp;rsquo;s break it down using an
example. Let&amp;rsquo;s say we are writing our own version of the &lt;a href=&#34;https://pip.pypa.io/en/latest/&#34;&gt;&lt;code&gt;pip&lt;/code&gt;
command&lt;/a&gt;. In this version you can call &lt;code&gt;pip&lt;/code&gt;
with the &lt;code&gt;-h&lt;/code&gt; option to display a help message.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; pip -h
Usage: 
    pip -h                      Display this help message.
    pip install                 Install a Python package.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use &lt;code&gt;getopts&lt;/code&gt; to parse the &lt;code&gt;-h&lt;/code&gt; option with the following &lt;code&gt;while&lt;/code&gt; loop.
In it we catch invalid options with &lt;code&gt;\?&lt;/code&gt; and &lt;code&gt;shift&lt;/code&gt; all arguments that have
been processed with &lt;code&gt;shift $((OPTIND -1))&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;while getopts &amp;quot;:h&amp;quot; opt; do
  case ${opt} in
    h )
      echo &amp;quot;Usage:&amp;quot;
      echo &amp;quot;    pip -h                      Display this help message.&amp;quot;
      echo &amp;quot;    pip install                 Install a Python package.&amp;quot;
      exit 0
      ;;
    \? )
      echo &amp;quot;Invalid Option: -$OPTARG&amp;quot; 1&amp;gt;&amp;amp;2
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s add the sub-command &lt;code&gt;install&lt;/code&gt; to our script.  &lt;code&gt;install&lt;/code&gt; takes as an
argument the Python package to install.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; pip install urllib3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;install&lt;/code&gt; also takes an option, &lt;code&gt;-t&lt;/code&gt;. &lt;code&gt;-t&lt;/code&gt; takes as an argument the location to
install the package to relative to the current directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; pip install urllib3 -t ./src/lib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To process this line we must find the sub-command to execute. This value is the
first argument to our script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;subcommand=$1
shift # Remove `pip` from the argument list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can process the sub-command &lt;code&gt;install&lt;/code&gt;. In our example, the option &lt;code&gt;-t&lt;/code&gt; is
actually an option that follows the package argument so we begin by removing
&lt;code&gt;install&lt;/code&gt; from the argument list and processing the remainder of the line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;case &amp;quot;$subcommand&amp;quot; in
  install)
    package=$1
    shift # Remove `install` from the argument list
    ;;
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After shifting the argument list we can process the remaining arguments as if
they are of the form &lt;code&gt;package -t src/lib&lt;/code&gt;. The &lt;code&gt;-t&lt;/code&gt; option takes an argument
itself. This argument will be stored in the variable &lt;code&gt;OPTARG&lt;/code&gt; and we save it to
the variable &lt;code&gt;target&lt;/code&gt; for further work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;case &amp;quot;$subcommand&amp;quot; in
  install)
    package=$1
    shift # Remove `install` from the argument list

  while getopts &amp;quot;:t:&amp;quot; opt; do
    case ${opt} in
      t )
        target=$OPTARG
        ;;
      \? )
        echo &amp;quot;Invalid Option: -$OPTARG&amp;quot; 1&amp;gt;&amp;amp;2
        exit 1
        ;;
      : )
        echo &amp;quot;Invalid Option: -$OPTARG requires an argument&amp;quot; 1&amp;gt;&amp;amp;2
        exit 1
        ;;
    esac
  done
  shift $((OPTIND -1))
  ;;
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Putting this all together, we end up with the following script that parses
arguments to our version of &lt;code&gt;pip&lt;/code&gt; and its sub-command &lt;code&gt;install&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;package=&amp;quot;&amp;quot;  # Default to empty package
target=&amp;quot;&amp;quot;  # Default to empty target

# Parse options to the `pip` command
while getopts &amp;quot;:h&amp;quot; opt; do
  case ${opt} in
    h )
      echo &amp;quot;Usage:&amp;quot;
      echo &amp;quot;    pip -h                      Display this help message.&amp;quot;
      echo &amp;quot;    pip install &amp;lt;package&amp;gt;       Install &amp;lt;package&amp;gt;.&amp;quot;
      exit 0
      ;;
   \? )
     echo &amp;quot;Invalid Option: -$OPTARG&amp;quot; 1&amp;gt;&amp;amp;2
     exit 1
     ;;
  esac
done
shift $((OPTIND -1))

subcommand=$1; shift  # Remove &#39;pip&#39; from the argument list
case &amp;quot;$subcommand&amp;quot; in
  # Parse options to the install sub command
  install)
    package=$1; shift  # Remove &#39;install&#39; from the argument list

    # Process package options
    while getopts &amp;quot;:t:&amp;quot; opt; do
      case ${opt} in
        t )
          target=$OPTARG
          ;;
        \? )
          echo &amp;quot;Invalid Option: -$OPTARG&amp;quot; 1&amp;gt;&amp;amp;2
          exit 1
          ;;
        : )
          echo &amp;quot;Invalid Option: -$OPTARG requires an argument&amp;quot; 1&amp;gt;&amp;amp;2
          exit 1
          ;;
      esac
    done
    shift $((OPTIND -1))
    ;;
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After processing the above sequence of commands, the variable &lt;code&gt;package&lt;/code&gt; will
hold the package to install and the variable &lt;code&gt;target&lt;/code&gt; will hold the target to
install the package to. You can use this as a template for processing any set of
arguments and options to your scripts.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
