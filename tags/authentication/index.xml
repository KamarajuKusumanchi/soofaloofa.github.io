<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Kevin Sookocheff</title>
    <link>http://sookocheff.com/tags/authentication/index.xml/</link>
    <language>en-us</language>
    <author>Kevin Sookocheff</author>
    <copyright>Copyright Kevin Sookocheff.</copyright>
    <updated>Tue, 22 Jul 2014 06:29:56 UTC</updated>
    
    <item>
      <title>Generating a C# client for an App Engine Cloud Endpoints API</title>
      <link>http://sookocheff.com/posts/2014-07-22-generating-a-c-sharp-client/</link>
      <pubDate>Tue, 22 Jul 2014 06:29:56 UTC</pubDate>
      <author>Kevin Sookocheff</author>
      <guid>http://sookocheff.com/posts/2014-07-22-generating-a-c-sharp-client/</guid>
      <description>&lt;p&gt;The Cloud Endpoints API comes packaged with endpointscfg.py to generate client
libraries in JavaScript, Objective-C (for iOS) and Java (for Android). You can
also generate a few additional client libraries using the &lt;a href=&#34;https://code.google.com/p/google-apis-client-generator/&#34;&gt;Google APIs client
generator&lt;/a&gt;. This
article will show you how to use the generator to create a C# client library.&lt;/p&gt;

&lt;p&gt;The client generator is a Python application you can install with &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install google-apis-client-generator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client generator works by taking an API discovery document, parsing it into
an object model, and then using a language template to transform the object
model to running code.&lt;/p&gt;

&lt;p&gt;To run the generator you will need the discovery document for your API. You can
find this document from the root API discovery URL. First, download the root API
discovery document using &lt;a href=&#34;https://github.com/jakubroztocil/httpie&#34;&gt;httpie&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http --download https://example.appspot.com/_ah/api/discovery/v1/apis
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;items&amp;quot;: [
    {
        &amp;quot;description&amp;quot;: &amp;quot;Example Api&amp;quot;,
        &amp;quot;discoveryLink&amp;quot;: &amp;quot;./apis/example/v1/rest&amp;quot;,
        &amp;quot;discoveryRestUrl&amp;quot;: &amp;quot;https://example.appspot.com/_ah/api/discovery/v1/apis/example/v1/rest&amp;quot;,
        &amp;quot;icons&amp;quot;: {
            &amp;quot;x16&amp;quot;: &amp;quot;http://www.google.com/images/icons/product/search-16.gif&amp;quot;,
            &amp;quot;x32&amp;quot;: &amp;quot;http://www.google.com/images/icons/product/search-32.gif&amp;quot;
        },
        &amp;quot;id&amp;quot;: &amp;quot;example:v1&amp;quot;,
        &amp;quot;kind&amp;quot;: &amp;quot;discovery#directoryItem&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;example&amp;quot;,
        &amp;quot;preferred&amp;quot;: true,
        &amp;quot;version&amp;quot;: &amp;quot;v1&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The root discovery document will have an &lt;code&gt;items&lt;/code&gt; member listing the available
APIs and a &lt;code&gt;discoveryLink&lt;/code&gt; for each API. The &lt;code&gt;discoveryLink&lt;/code&gt; provides the schema
for the API. We can download this schema and use it as input to the client
generator.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http --download https://example.appspot.com/_ah/api/discovery/v1/apis/example/v1/rest

generate_library --input=rest.json --language=csharp --output_dir=tmp/csharp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your C# client library is now ready to use. As of this writing you can generate
client libraries in C++, C#, Dart, GWT, Java, PHP and Python.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Basic Authentication with Google Cloud Endpoints</title>
      <link>http://sookocheff.com/posts/2014-07-16-using-basic-authentication-with-google-cloud-endpoints/</link>
      <pubDate>Wed, 16 Jul 2014 01:02:25 UTC</pubDate>
      <author>Kevin Sookocheff</author>
      <guid>http://sookocheff.com/posts/2014-07-16-using-basic-authentication-with-google-cloud-endpoints/</guid>
      <description>

&lt;p&gt;Cloud Endpoints provides strong integration with OAuth 2.0. If you can use this
integration &amp;ndash; do it. However, some legacy systems require supporting
alternative authentication mechanisms. This article will show you how to secure
an API endpoint using Basic Authentication. You can use this as a starting point
for whatever authentication method you choose.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;A basic endpoint&lt;/h2&gt;

&lt;p&gt;As a starting point let&amp;rsquo;s define a basic endpoint that will return a
hypothetical UserMessage defining a User resource.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@endpoints.api(name=&#39;users&#39;, version=&#39;v1&#39;, description=&#39;Users Api&#39;)
class UsersApi(remote.Service):

    @endpoints.method(message_types.VoidMessage,
                      UserMessage,
                      http_method=&#39;GET&#39;,
                      path=&#39;user&#39;,
                      name=&#39;user.auth&#39;)
    def user_auth(self, request):
        ## Return a UserMessage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s build up a UserMessage based on the credentials set in the HTTP
Authorization header. We can access the HTTP headers of the request through the
&lt;a href=&#34;https://developers.google.com/appengine/docs/python/tools/protorpc/remote/httprequeststateclass&#34;&gt;HTTPRequestState&lt;/a&gt;
using the instance variable &lt;code&gt;request_state&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@endpoints.api(name=&#39;users&#39;, version=&#39;v1&#39;, description=&#39;Users Api&#39;)
class UsersApi(remote.Service):

    @endpoints.method(message_types.VoidMessage,
                      UserMessage,
                      http_method=&#39;GET&#39;,
                      path=&#39;user&#39;,
                      name=&#39;user.auth&#39;)
    def user_auth(self, request):
        basic_auth = self.request_state.headers.get(&#39;authorization&#39;)
        print basic_auth
        ## Return a UserMessage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can test this endpoint using &lt;a href=&#34;https://github.com/jakubroztocil/httpie&#34;&gt;httpie&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http -a username:password GET :8888/_ah/api/users/v1/user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examing the logs will show that we receive the HTTP Authorization header in its
base64 encoded form.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Basic dXNlcm5hbWU6cGFzc3dvcmQ=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The header can be decoded with the &lt;code&gt;base64&lt;/code&gt; module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;basic_auth = self.request_state.headers.get(&#39;authorization&#39;)
auth_type, credentials = basic_auth.split(&#39; &#39;)
print base64.b64decode(credentials)  # prints username:password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the username and password we can check the datastore for a User model with
the same credentials and return a &lt;code&gt;UserMessage&lt;/code&gt; based on the model .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@endpoints.api(name=&#39;users&#39;, version=&#39;v1&#39;, description=&#39;Users Api&#39;)
class UsersApi(remote.Service):

    @endpoints.method(message_types.VoidMessage,
                      UserMessage,
                      http_method=&#39;GET&#39;,
                      path=&#39;user&#39;,
                      name=&#39;user.auth&#39;)
    def user_auth(self, request):
        basic_auth = self.request_state.headers.get(&#39;authorization&#39;)
        auth_type, credentials = basic_auth.split(&#39; &#39;)
        username, password = base64.b64decode(credentials).split(&#39;:&#39;)
        user = User.get_by_username(username)
        if user and user.verify_password(password):
            return user.to_message()
        else:
            raise endpoints.UnauthorizedException
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should serve as a starting point for anyone wishing to use Basic
Authentication with Google Cloud Endpoints. If you&amp;rsquo;ve read this far, why not
subscribe to this blog through &lt;a href=&#34;http://kevinsookocheff.us3.list-manage2.com/subscribe?u=8b57d632b8677f07ca57dc9cb&amp;amp;id=ec7ddaa3ba&#34;&gt;email&lt;/a&gt; or &lt;a href=&#34;http://sookocheff.com/index.xml&#34;&gt;RSS&lt;/a&gt;?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
